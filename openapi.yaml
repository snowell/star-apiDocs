openapi: 3.0.1
info:
  title: Stardog HTTP API
  description: Description
  contact:
    email: stephen@stardog.com
  version: 7.3.0-SNAPSHOT-20200413
tags:
  - name: Server Admin
    description: Server administration operations. May require superuser permissions
  - name: DB Admin
    description: Database administration operations
  - name: Transactions
    description: Transactional operations
  - name: Graph Store Protocol
    description: 'Operations on named graphs as detailed in https://www.w3.org/TR/sparql11-http-rdf-update/'
  - name: SPARQL
    description: SPARQL Queries
  - name: Server Status/Metrics
    description: ''
  - name: Users
    description: Operations on system users
  - name: Roles
    description: Operations on system roles
  - name: Permissions
    description: Operations on system permissions
  - name: Queries
    description: Operations relating to queries running on the server
  - name: Stored Functions
    description: Operations relating to user-defined functions stored on the server
paths:
  /admin/shutdown:
    post:
      tags:
        - Server Admin
      summary: Shutdown server
      operationId: shutdown
      responses:
        '200':
          description: Shutdown request received
        '405':
          description: Remote shutdowns not allowed
  /admin/alive:
    get:
      tags:
        - Server Admin
      summary: Server aliveness check
      description: Determine whether the server is running
      operationId: aliveCheck
      responses:
        '200':
          description: Server is running
  /admin/healthcheck:
    get:
      tags:
        - Server Admin
      summary: Server health check
      description: Determine whether the server is running and able to accept traffic
      operationId: healthCheck
      responses:
        '200':
          description: Server is running and healthy
        '503':
          description: Server is unavailable
  '/{db}/namespaces':
    get:
      tags:
        - DB Admin
      summary: Get namespaces
      description: Retrieve the namespaces stored in the database
      operationId: getNamespaces
      parameters:
        - $ref: '#/components/parameters/db'
      responses:
        '200':
          description: A JSON object listing the prefixes and IRIs of the stored namespaces
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSON_NAMESPACES'
        '404':
          description: Database does not exist
    post:
      tags:
        - DB Admin
      summary: Import namespaces
      description: Add namespaces to the database via a block or blocks of RDF that declares them
      operationId: importNamespaces
      parameters:
        - $ref: '#/components/parameters/db'
      requestBody:
        content:
          text/turtle:
            examples:
              GENERIC_TURTLE:
                description: GENERIC_TURTLE
                $ref: '#/components/examples/GENERIC_TURTLE'
          application/trig:
            examples:
              GENERIC_TRIG:
                description: GENERIC_TRIG
                $ref: '#/components/examples/GENERIC_TRIG'
          application/rdf+xml:
            examples:
              GENERIC_RDFXML:
                description: GENERIC_RDFXML
                $ref: '#/components/examples/GENERIC_RDFXML'
          application/n-triples:
            examples:
              GENERIC_NTRIPLES:
                description: GENERIC_NTRIPLES
                $ref: '#/components/examples/GENERIC_NTRIPLES'
          application/n-quads:
            examples:
              GENERIC_NQUADS:
                description: GENERIC_NQUADS
                $ref: '#/components/examples/GENERIC_NQUADS'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/GENERIC_JSONLD'
        required: true
      responses:
        '200':
          description: A JSON object listing the prefixes and IRIs of the stored namespaces
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSON_NAMESPACES'
        '404':
          description: Database does not exist
  '/{db}/size':
    get:
      tags:
        - DB Admin
      summary: Get DB Size
      operationId: size
      parameters:
        - $ref: '#/components/parameters/db'
        - name: exact
          in: query
          description: Whether to request that the database size be exact instead of approximate
          schema:
            type: boolean
      responses:
        '200':
          description: The size (in triples) of the database
          content:
            text/plain:
              schema:
                type: integer
        '404':
          description: Database does not exist
  '/{db}/export':
    get:
      tags:
        - DB Admin
      summary: Export database
      operationId: export
      parameters:
        - $ref: '#/components/parameters/db'
        - name: obf
          in: query
          description: 'Path to an obfuscation configuration file, or DEFAULT'
          schema:
            type: string
      responses:
        '200':
          description: RDF serialization of the database
          content:
            text/turtle:
              examples:
                GENERIC_TURTLE:
                  description: GENERIC_TURTLE
                  $ref: '#/components/examples/GENERIC_TURTLE'
            application/trig:
              examples:
                GENERIC_TRIG:
                  description: GENERIC_TRIG
                  $ref: '#/components/examples/GENERIC_TRIG'
            application/rdf+xml:
              examples:
                GENERIC_RDFXML:
                  description: GENERIC_RDFXML
                  $ref: '#/components/examples/GENERIC_RDFXML'
            application/n-triples:
              examples:
                GENERIC_NTRIPLES:
                  description: GENERIC_NTRIPLES
                  $ref: '#/components/examples/GENERIC_NTRIPLES'
            application/n-quads:
              examples:
                GENERIC_NQUADS:
                  description: GENERIC_NQUADS
                  $ref: '#/components/examples/GENERIC_NQUADS'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/GENERIC_JSONLD'
        '404':
          description: Database does not exist
    post:
      tags:
        - DB Admin
      summary: Export database (obfuscated)
      operationId: exportObfuscated
      parameters:
        - $ref: '#/components/parameters/db'
      requestBody:
        description: Obfuscation configuration
        content:
          text/turtle:
            example: |-
              @prefix obf: <tag:stardog:api:obf:> .

              [] a obf:Obfuscation ;
                  obf:digest "SHA-256" ;
                  obf:include [
                      obf:position obf:any ;
                      obf:pattern ".*"
                  ] ;

                  obf:exclude [
                      obf:position obf:any ;
                      obf:namespace "rdf"
                  ] ;
                  obf:exclude [
                      obf:position obf:any ;
                      obf:namespace "owl"
                  ] ;
                  obf:exclude [
                      obf:position obf:predicate ;
                      obf:namespace "rdfs"
                  ] ;
        required: true
      responses:
        '200':
          description: Obfuscated RDF serialization of the database
          content:
            text/turtle:
              examples:
                GENERIC_TURTLE_OBF:
                  description: GENERIC_TURTLE_OBF
                  $ref: '#/components/examples/GENERIC_TURTLE_OBF'
            application/trig:
              examples:
                GENERIC_TRIG_OBF:
                  description: GENERIC_TRIG_OBF
                  $ref: '#/components/examples/GENERIC_TRIG_OBF'
            application/rdf+xml:
              examples:
                GENERIC_RDFXML_OBF:
                  description: GENERIC_RDFXML_OBF
                  $ref: '#/components/examples/GENERIC_RDFXML_OBF'
            application/n-triples:
              examples:
                GENERIC_NTRIPLES_OBF:
                  description: GENERIC_NTRIPLES_OBF
                  $ref: '#/components/examples/GENERIC_NTRIPLES_OBF'
            application/n-quads:
              examples:
                GENERIC_NQUADS_OBF:
                  description: GENERIC_NQUADS_OBF
                  $ref: '#/components/examples/GENERIC_NQUADS_OBF'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/GENERIC_JSONLD_OBF'
        '404':
          description: Database does not exist
  '/{db}/model':
    get:
      tags:
        - DB Admin
      summary: Generate Model
      description: Generate the reasoning model used by this database in various formats
      operationId: generateModel
      parameters:
        - $ref: '#/components/parameters/db'
        - $ref: '#/components/parameters/reasoning'
        - name: output
          in: query
          description: 'Desired output format (text, owl, shacl, sql, graphql)'
          schema:
            type: string
      responses:
        '200':
          description: RDF serialization of the reasoning model
          content:
            text/turtle:
              examples:
                GENERIC_TURTLE:
                  description: GENERIC_TURTLE
                  $ref: '#/components/examples/GENERIC_TURTLE'
            application/trig:
              examples:
                GENERIC_TRIG:
                  description: GENERIC_TRIG
                  $ref: '#/components/examples/GENERIC_TRIG'
            application/rdf+xml:
              examples:
                GENERIC_RDFXML:
                  description: GENERIC_RDFXML
                  $ref: '#/components/examples/GENERIC_RDFXML'
            application/n-triples:
              examples:
                GENERIC_NTRIPLES:
                  description: GENERIC_NTRIPLES
                  $ref: '#/components/examples/GENERIC_NTRIPLES'
            application/n-quads:
              examples:
                GENERIC_NQUADS:
                  description: GENERIC_NQUADS
                  $ref: '#/components/examples/GENERIC_NQUADS'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/GENERIC_JSONLD'
        '404':
          description: Database does not exist
  /admin/databases:
    get:
      tags:
        - DB Admin
      summary: List databases
      description: List all the databases in the server
      operationId: listDatabases
      responses:
        '200':
          description: A JSON object listing the databases
          content:
            application/json:
              example:
                databases:
                  - myDb
                  - myOtherDb
    post:
      tags:
        - DB Admin
      summary: Create database
      description: 'Add a new database to the server, optionally with RDF bulk-loaded'
      operationId: createNewDatabase
      requestBody:
        description: A multipart request with a JSON root element and optionally RDF file contents
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DB_CREATE'
      responses:
        '201':
          description: Database created
        '400':
          description: Invalid or malformed request body
  /admin/config_properties:
    get:
      tags:
        - DB Admin
      summary: Get all metadata properties
      description: 'Get information on all database metadata properties, including description and example values'
      operationId: getAllMetaProperties
      responses:
        '200':
          $ref: '#/components/responses/JSON_CONFIG_PROPERTIES'
  /admin/restore_all:
    put:
      tags:
        - DB Admin
      summary: Restore multiple databases
      description: Restore multiple databases from backup
      operationId: restoreAll
      parameters:
        - name: from
          in: query
          description: The location on the server of the backups
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/GENERIC_RESPONSE_MESSAGE'
  '/admin/databases/{db}/backup':
    put:
      tags:
        - DB Admin
      summary: Backup a database
      description: Create a backup of a database on the server
      operationId: backup
      parameters:
        - $ref: '#/components/parameters/db'
        - name: to
          in: query
          description: File location on the server to which to save the backup (defaults to $STARDOG_HOME/.backup)
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/GENERIC_RESPONSE_MESSAGE'
        '404':
          description: Database does not exist
  /admin/restore:
    put:
      tags:
        - DB Admin
      summary: Restore database
      description: Restore a database from backup
      operationId: restore
      parameters:
        - name: from
          in: query
          description: The location on the server of the backup
          required: true
          schema:
            type: string
        - name: force
          in: query
          description: Whether or not to overwrite an existing database with this backup
          schema:
            type: boolean
        - name: name
          in: query
          description: 'The name of the restored database, if different'
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/GENERIC_RESPONSE_MESSAGE'
  '/admin/databases/{db}/repair':
    put:
      tags:
        - DB Admin
      summary: Repair database
      description: Attempt to recover a corrupted database
      operationId: repair
      parameters:
        - $ref: '#/components/parameters/db'
      responses:
        '200':
          $ref: '#/components/responses/GENERIC_RESPONSE_MESSAGE'
        '404':
          description: Database does not exist
  '/admin/databases/{db}/options':
    get:
      tags:
        - DB Admin
      summary: Get all DB options
      description: Get the value of every metadata option for a database
      operationId: getAllOptions
      parameters:
        - $ref: '#/components/parameters/db'
      responses:
        '200':
          description: JSON object detailing all database metadata
          content:
            application/json: {}
        '404':
          description: Database does not exist
    put:
      tags:
        - DB Admin
      summary: Get DB options
      description: Get the value of specific metadata options for a database
      operationId: getOptions
      parameters:
        - $ref: '#/components/parameters/db'
      requestBody:
        content:
          application/json:
            example:
              spatial.result.limit: null
              query.all.graphs: null
        required: true
      responses:
        '200':
          content:
            application/json:
              example:
                spatial.result.limit: 10000
                query.all.graphs: true
        '404':
          description: Database does not exist
    post:
      tags:
        - DB Admin
      summary: Set DB options
      description: Set the value of specific metadata options for a database
      operationId: setOption
      parameters:
        - $ref: '#/components/parameters/db'
      requestBody:
        description: A JSON object with keys and values equal to the desired metadata options
        content:
          application/json:
            example:
              spatial.result.limit: 10000
              query.all.graphs: true
        required: true
      responses:
        '200':
          $ref: '#/components/responses/GENERIC_RESPONSE_MESSAGE'
        '404':
          description: Database does not exist
  '/admin/databases/{db}':
    delete:
      tags:
        - DB Admin
      summary: Drop database
      description: Delete the datbase
      operationId: dropDatabase
      parameters:
        - $ref: '#/components/parameters/db'
      responses:
        '200':
          $ref: '#/components/responses/GENERIC_RESPONSE_MESSAGE'
        '404':
          description: Database does not exist
  /admin/databases/backup_all:
    put:
      tags:
        - DB Admin
      summary: Backup all databases
      description: Create a backup of all databases on the server
      operationId: backupAll
      parameters:
        - name: to
          in: query
          description: File location on the server to which to save the backups (defaults to $STARDOG_HOME/.backup)
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/GENERIC_RESPONSE_MESSAGE'
  '/admin/databases/{db}/online':
    put:
      tags:
        - DB Admin
      summary: Online database
      description: Bring a database online
      operationId: online
      parameters:
        - $ref: '#/components/parameters/db'
      responses:
        '200':
          $ref: '#/components/responses/GENERIC_RESPONSE_MESSAGE'
        '404':
          description: Database does not exist
  '/admin/databases/{db}/optimize':
    put:
      tags:
        - DB Admin
      summary: Optimize database
      description: Optimize the index of a database
      operationId: optimize
      parameters:
        - $ref: '#/components/parameters/db'
      requestBody:
        description: Configuration parameters
        content:
          application/json: {}
      responses:
        '200':
          $ref: '#/components/responses/GENERIC_RESPONSE_MESSAGE'
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
        '404':
          description: Database does not exist
  '/admin/databases/{db}/offline':
    put:
      tags:
        - DB Admin
      summary: Offline database
      description: Take a database offline
      operationId: offline
      parameters:
        - $ref: '#/components/parameters/db'
      requestBody:
        $ref: '#/components/requestBodies/DB_OFFLINE_ONLINE'
      responses:
        '200':
          $ref: '#/components/responses/GENERIC_RESPONSE_MESSAGE'
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
        '404':
          description: Database does not exist
  '/{db}/transaction/begin':
    post:
      tags:
        - Transactions
      summary: Begin a transaction
      operationId: begin
      parameters:
        - $ref: '#/components/parameters/db'
      responses:
        '200':
          content:
            text/plain:
              example: 067e6162-3b6f-4ae2-a171-2470b63dff00
        '404':
          description: Database Not Found
      x-sort-order:
        group: '1'
        order: '1'
  '/{db}/transaction/begin/{txid}':
    post:
      tags:
        - Transactions
      summary: Begin a transaction with specified txid
      operationId: beginTx
      parameters:
        - $ref: '#/components/parameters/db'
        - $ref: '#/components/parameters/txid'
      responses:
        '200':
          description: Transaction begun
          content:
            text/plain:
              example: 067e6162-3b6f-4ae2-a171-2470b63dff00
        '404':
          description: Database Not Found
      x-sort-order:
        group: '1'
        order: '2'
  '/{db}/transaction/commit/{txid}':
    post:
      tags:
        - Transactions
      summary: Commit a transaction
      operationId: commit
      parameters:
        - $ref: '#/components/parameters/db'
        - $ref: '#/components/parameters/txid'
      responses:
        '200':
          description: Commit successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/COMMIT_RESULT'
        '404':
          $ref: '#/components/responses/DB_TX_404'
      x-sort-order:
        group: '1'
        order: '3'
  '/{db}/transaction/rollback/{txid}':
    post:
      tags:
        - Transactions
      summary: Rollback a transaction
      operationId: rollback
      parameters:
        - $ref: '#/components/parameters/db'
        - $ref: '#/components/parameters/txid'
      responses:
        '200':
          $ref: '#/components/responses/EMPTY_SUCCESS'
        '404':
          $ref: '#/components/responses/DB_TX_404'
      x-sort-order:
        group: '1'
        order: '4'
  '/{db}/{txid}/remove':
    post:
      tags:
        - Transactions
      summary: Remove data within a transaction
      operationId: remove
      parameters:
        - $ref: '#/components/parameters/db'
        - $ref: '#/components/parameters/txid'
        - $ref: '#/components/parameters/graph-uri'
      requestBody:
        content:
          text/turtle:
            examples:
              GENERIC_TURTLE:
                description: GENERIC_TURTLE
                $ref: '#/components/examples/GENERIC_TURTLE'
          application/trig:
            examples:
              GENERIC_TRIG:
                description: GENERIC_TRIG
                $ref: '#/components/examples/GENERIC_TRIG'
          application/rdf+xml:
            examples:
              GENERIC_RDFXML:
                description: GENERIC_RDFXML
                $ref: '#/components/examples/GENERIC_RDFXML'
          application/n-triples:
            examples:
              GENERIC_NTRIPLES:
                description: GENERIC_NTRIPLES
                $ref: '#/components/examples/GENERIC_NTRIPLES'
          application/n-quads:
            examples:
              GENERIC_NQUADS:
                description: GENERIC_NQUADS
                $ref: '#/components/examples/GENERIC_NQUADS'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/GENERIC_JSONLD'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/EMPTY_SUCCESS'
        '404':
          $ref: '#/components/responses/DB_TX_404'
  '/{db}/{txid}/add':
    post:
      tags:
        - Transactions
      summary: Add data within a transaction
      operationId: add
      parameters:
        - $ref: '#/components/parameters/db'
        - $ref: '#/components/parameters/txid'
        - $ref: '#/components/parameters/graph-uri'
      requestBody:
        content:
          text/turtle:
            examples:
              GENERIC_TURTLE:
                description: GENERIC_TURTLE
                $ref: '#/components/examples/GENERIC_TURTLE'
          application/trig:
            examples:
              GENERIC_TRIG:
                description: GENERIC_TRIG
                $ref: '#/components/examples/GENERIC_TRIG'
          application/rdf+xml:
            examples:
              GENERIC_RDFXML:
                description: GENERIC_RDFXML
                $ref: '#/components/examples/GENERIC_RDFXML'
          application/n-triples:
            examples:
              GENERIC_NTRIPLES:
                description: GENERIC_NTRIPLES
                $ref: '#/components/examples/GENERIC_NTRIPLES'
          application/n-quads:
            examples:
              GENERIC_NQUADS:
                description: GENERIC_NQUADS
                $ref: '#/components/examples/GENERIC_NQUADS'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/GENERIC_JSONLD'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/EMPTY_SUCCESS'
        '404':
          $ref: '#/components/responses/DB_TX_404'
  '/{db}/transaction':
    get:
      tags:
        - Transactions
      summary: List all open transactions on a database
      operationId: listTransactions
      parameters:
        - $ref: '#/components/parameters/db'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TRANSACTION'
        '404':
          description: Database Not Found
  '/{db}/{txid}/clear':
    post:
      tags:
        - Transactions
      summary: Clear database within a transaction
      operationId: clear
      parameters:
        - $ref: '#/components/parameters/db'
        - $ref: '#/components/parameters/txid'
        - $ref: '#/components/parameters/graph-uri'
      responses:
        '200':
          $ref: '#/components/responses/EMPTY_SUCCESS'
        '404':
          $ref: '#/components/responses/DB_TX_404'
  '/{db}':
    get:
      tags:
        - Graph Store Protocol
      summary: GET graph
      description: Retrieves an RDF payload that is a serialization of the named graph paired with the graph IRI in the database
      operationId: getGraph
      parameters:
        - $ref: '#/components/parameters/db'
        - name: graph
          in: query
          description: IRI of the named graph to retrieve
          schema:
            type: string
        - name: default
          in: query
          description: Include instead of 'query' to operate on the default graph
          schema:
            type: string
      responses:
        '200':
          description: RDF serialization of the named graph
          content:
            text/turtle:
              examples:
                GENERIC_TURTLE:
                  description: GENERIC_TURTLE
                  $ref: '#/components/examples/GENERIC_TURTLE'
            application/trig:
              examples:
                GENERIC_TRIG:
                  description: GENERIC_TRIG
                  $ref: '#/components/examples/GENERIC_TRIG'
            application/rdf+xml:
              examples:
                GENERIC_RDFXML:
                  description: GENERIC_RDFXML
                  $ref: '#/components/examples/GENERIC_RDFXML'
            application/n-triples:
              examples:
                GENERIC_NTRIPLES:
                  description: GENERIC_NTRIPLES
                  $ref: '#/components/examples/GENERIC_NTRIPLES'
            application/n-quads:
              examples:
                GENERIC_NQUADS:
                  description: GENERIC_NQUADS
                  $ref: '#/components/examples/GENERIC_NQUADS'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/GENERIC_JSONLD'
        '404':
          description: Database does not exist
    put:
      tags:
        - Graph Store Protocol
      summary: PUT graph
      description: Stores the enclosed RDF payload as RDF graph content
      operationId: setGraph
      parameters:
        - $ref: '#/components/parameters/db'
        - name: graph
          in: query
          description: IRI of the target named graph
          schema:
            type: string
        - name: default
          in: query
          description: Include instead of 'query' to operate on the default graph
          schema:
            type: string
      requestBody:
        content:
          text/turtle:
            examples:
              GENERIC_TURTLE:
                description: GENERIC_TURTLE
                $ref: '#/components/examples/GENERIC_TURTLE'
          application/trig:
            examples:
              GENERIC_TRIG:
                description: GENERIC_TRIG
                $ref: '#/components/examples/GENERIC_TRIG'
          application/rdf+xml:
            examples:
              GENERIC_RDFXML:
                description: GENERIC_RDFXML
                $ref: '#/components/examples/GENERIC_RDFXML'
          application/n-triples:
            examples:
              GENERIC_NTRIPLES:
                description: GENERIC_NTRIPLES
                $ref: '#/components/examples/GENERIC_NTRIPLES'
          application/n-quads:
            examples:
              GENERIC_NQUADS:
                description: GENERIC_NQUADS
                $ref: '#/components/examples/GENERIC_NQUADS'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/GENERIC_JSONLD'
        required: true
      responses:
        '200':
          description: Graph overwritten
        '201':
          description: Graph created
          headers:
            Location:
              style: simple
              schema:
                type: string
                format: URI
        '404':
          description: Database does not exist
    post:
      tags:
        - Graph Store Protocol
      summary: POST graph
      description: Merges the enclosed RDF payload with the specified graph content
      operationId: appendToGraph
      parameters:
        - $ref: '#/components/parameters/db'
        - name: graph
          in: query
          description: IRI of the target named graph
          schema:
            type: string
        - name: default
          in: query
          description: Include instead of 'query' to operate on the default graph
          schema:
            type: string
      requestBody:
        content:
          text/turtle:
            examples:
              GENERIC_TURTLE:
                description: GENERIC_TURTLE
                $ref: '#/components/examples/GENERIC_TURTLE'
          application/trig:
            examples:
              GENERIC_TRIG:
                description: GENERIC_TRIG
                $ref: '#/components/examples/GENERIC_TRIG'
          application/rdf+xml:
            examples:
              GENERIC_RDFXML:
                description: GENERIC_RDFXML
                $ref: '#/components/examples/GENERIC_RDFXML'
          application/n-triples:
            examples:
              GENERIC_NTRIPLES:
                description: GENERIC_NTRIPLES
                $ref: '#/components/examples/GENERIC_NTRIPLES'
          application/n-quads:
            examples:
              GENERIC_NQUADS:
                description: GENERIC_NQUADS
                $ref: '#/components/examples/GENERIC_NQUADS'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/GENERIC_JSONLD'
          multipart/form-data: {}
        required: true
      responses:
        '200':
          description: Graph merged
        '404':
          description: Database does not exist
    delete:
      tags:
        - Graph Store Protocol
      summary: DELETE graph
      description: Deletes the RDF graph content identified by either the request or encoded IRI
      operationId: dropGraph
      parameters:
        - $ref: '#/components/parameters/db'
        - name: graph
          in: query
          description: IRI of the named graph to delete
          schema:
            type: string
        - name: default
          in: query
          description: Include instead of 'query' to operate on the default graph
          schema:
            type: string
      responses:
        '200':
          description: Graph deleted
        '404':
          description: Database or Graph does not exist
    head:
      tags:
        - Graph Store Protocol
      summary: HEAD graph
      description: Test dereferenceable IRIs for validity and accessibility
      operationId: checkGraph
      parameters:
        - $ref: '#/components/parameters/db'
        - name: graph
          in: query
          description: IRI of the target named graph
          schema:
            type: string
        - name: default
          in: query
          description: Include instead of 'query' to operate on the default graph
          schema:
            type: string
      responses:
        '200':
          description: Graph exists and is accessible
        '404':
          description: Database or Graph does not exist
  '/{db}/explain':
    get:
      tags:
        - SPARQL
      summary: Explain SPARQL query
      operationId: explainQueryGet
      parameters:
        - $ref: '#/components/parameters/db'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/reasoning'
      responses:
        '200':
          description: Query plan
          content:
            text/plain:
              examples:
                QUERY_PLAN_TEST:
                  description: QUERY_PLAN_TEST
                  $ref: '#/components/examples/QUERY_PLAN_TEST'
            application/json:
              schema:
                $ref: '#/components/schemas/QUERY_PLAN_JSON'
        '400':
          $ref: '#/components/responses/INVALID_QUERY'
        '404':
          description: Database does not exist
    post:
      tags:
        - SPARQL
      summary: Explain SPARQL query
      operationId: explainQueryPost
      parameters:
        - $ref: '#/components/parameters/db'
      requestBody:
        content:
          application/sparql-query:
            examples:
              SPARQL_QUERY:
                description: SPARQL_QUERY
                $ref: '#/components/examples/SPARQL_QUERY'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SPARQL_QUERY'
        required: true
      responses:
        '200':
          description: Query plan
          content:
            text/plain:
              examples:
                QUERY_PLAN_TEST:
                  description: QUERY_PLAN_TEST
                  $ref: '#/components/examples/QUERY_PLAN_TEST'
            application/json:
              schema:
                $ref: '#/components/schemas/QUERY_PLAN_JSON'
        '400':
          $ref: '#/components/responses/INVALID_QUERY'
        '404':
          description: Database does not exist
  '/{db}/query':
    get:
      tags:
        - SPARQL
      summary: Perform SPARQL query
      operationId: get
      parameters:
        - $ref: '#/components/parameters/db'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/reasoning'
      responses:
        '200':
          description: Query results
          content:
            application/sparql-results+xml:
              examples:
                SPARQL_RESULTS_XML:
                  description: SPARQL_RESULTS_XML
                  $ref: '#/components/examples/SPARQL_RESULTS_XML'
            application/sparql-results+json:
              schema:
                $ref: '#/components/schemas/SPARQL_RESULTS_JSON'
            text/csv:
              examples:
                SPARQL_RESULTS_CSV:
                  description: SPARQL_RESULTS_CSV
                  $ref: '#/components/examples/SPARQL_RESULTS_CSV'
            text/tsv:
              examples:
                SPARQL_RESULTS_TSV:
                  description: SPARQL_RESULTS_TSV
                  $ref: '#/components/examples/SPARQL_RESULTS_TSV'
            text/turtle:
              examples:
                GENERIC_TURTLE:
                  description: GENERIC_TURTLE
                  $ref: '#/components/examples/GENERIC_TURTLE'
            application/trig:
              examples:
                GENERIC_TRIG:
                  description: GENERIC_TRIG
                  $ref: '#/components/examples/GENERIC_TRIG'
            application/rdf+xml:
              examples:
                GENERIC_RDFXML:
                  description: GENERIC_RDFXML
                  $ref: '#/components/examples/GENERIC_RDFXML'
            application/n-triples:
              examples:
                GENERIC_NTRIPLES:
                  description: GENERIC_NTRIPLES
                  $ref: '#/components/examples/GENERIC_NTRIPLES'
            application/n-quads:
              examples:
                GENERIC_NQUADS:
                  description: GENERIC_NQUADS
                  $ref: '#/components/examples/GENERIC_NQUADS'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/GENERIC_JSONLD'
        '400':
          $ref: '#/components/responses/INVALID_QUERY'
        '404':
          description: Database does not exist
        '406':
          description: Accept header invalid for type of query sent
    post:
      tags:
        - SPARQL
      summary: Perform SPARQL query
      operationId: post
      parameters:
        - $ref: '#/components/parameters/db'
      requestBody:
        content:
          application/sparql-query:
            examples:
              SPARQL_QUERY:
                description: SPARQL_QUERY
                $ref: '#/components/examples/SPARQL_QUERY'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SPARQL_QUERY'
        required: true
      responses:
        '200':
          description: Query results
          content:
            application/sparql-results+xml:
              examples:
                SPARQL_RESULTS_XML:
                  description: SPARQL_RESULTS_XML
                  $ref: '#/components/examples/SPARQL_RESULTS_XML'
            application/sparql-results+json:
              schema:
                $ref: '#/components/schemas/SPARQL_RESULTS_JSON'
            text/csv:
              examples:
                SPARQL_RESULTS_CSV:
                  description: SPARQL_RESULTS_CSV
                  $ref: '#/components/examples/SPARQL_RESULTS_CSV'
            text/tsv:
              examples:
                SPARQL_RESULTS_TSV:
                  description: SPARQL_RESULTS_TSV
                  $ref: '#/components/examples/SPARQL_RESULTS_TSV'
            text/turtle:
              examples:
                GENERIC_TURTLE:
                  description: GENERIC_TURTLE
                  $ref: '#/components/examples/GENERIC_TURTLE'
            application/trig:
              examples:
                GENERIC_TRIG:
                  description: GENERIC_TRIG
                  $ref: '#/components/examples/GENERIC_TRIG'
            application/rdf+xml:
              examples:
                GENERIC_RDFXML:
                  description: GENERIC_RDFXML
                  $ref: '#/components/examples/GENERIC_RDFXML'
            application/n-triples:
              examples:
                GENERIC_NTRIPLES:
                  description: GENERIC_NTRIPLES
                  $ref: '#/components/examples/GENERIC_NTRIPLES'
            application/n-quads:
              examples:
                GENERIC_NQUADS:
                  description: GENERIC_NQUADS
                  $ref: '#/components/examples/GENERIC_NQUADS'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/GENERIC_JSONLD'
        '400':
          $ref: '#/components/responses/INVALID_QUERY'
        '404':
          description: Database does not exist
        '406':
          description: Accept header invalid for type of query sent
  '/{db}/update':
    get:
      tags:
        - SPARQL
      summary: Perform SPARQL Update query
      operationId: updateGet
      parameters:
        - $ref: '#/components/parameters/db'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/reasoning'
      responses:
        '200':
          description: Update query succeeded
        '400':
          description: Invalid query sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE_ERROR_MESSAGE'
    post:
      tags:
        - SPARQL
      summary: Perform SPARQL Update query
      operationId: updatePost
      parameters:
        - $ref: '#/components/parameters/db'
      requestBody:
        content:
          application/sparql-update:
            examples:
              SPARQL_UPDATE:
                description: SPARQL_UPDATE
                $ref: '#/components/examples/SPARQL_UPDATE'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SPARQL_QUERY'
        required: true
      responses:
        '200':
          description: Update query succeeded
        '400':
          description: Invalid query sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE_ERROR_MESSAGE'
  /admin/status/prometheus:
    get:
      tags:
        - Server Status/Metrics
      summary: Get Prometheus metrics
      description: Return metric information from the registry in Prometheus format
      operationId: prometheus
      responses:
        '200':
          description: Prometheus metrics
          content:
            text/plain: {}
  /admin/status:
    get:
      tags:
        - Server Status/Metrics
      summary: Get Server metrics
      description: Return metric information from the registry in JSON format
      operationId: status
      responses:
        '200':
          description: Server metrics
          content:
            application/json: {}
  '/admin/users/{user}/enabled':
    get:
      tags:
        - Users
      summary: User enabled
      description: Return whether or not a user is enabled (active) in the system
      operationId: userEnabled
      parameters:
        - $ref: '#/components/parameters/user'
      responses:
        '200':
          $ref: '#/components/responses/ENABLED'
        '404':
          description: User not found
    put:
      tags:
        - Users
      summary: Enable/Disable User
      operationId: setUserEnabled
      parameters:
        - $ref: '#/components/parameters/user'
      requestBody:
        $ref: '#/components/requestBodies/ENABLED'
      responses:
        '200':
          description: Flag set
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
        '404':
          description: User not found
  /admin/users:
    get:
      tags:
        - Users
      summary: List users
      operationId: listUsers
      responses:
        '200':
          $ref: '#/components/responses/USER_LIST'
    post:
      tags:
        - Users
      summary: Add user
      operationId: addUser
      requestBody:
        $ref: '#/components/requestBodies/USER_CREATE'
      responses:
        '201':
          description: User created
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
  '/admin/users/{user}/pwd':
    put:
      tags:
        - Users
      summary: Change user's password
      operationId: changePassword
      parameters:
        - $ref: '#/components/parameters/user'
      requestBody:
        $ref: '#/components/requestBodies/USER_PASSWD'
      responses:
        '200':
          description: Password successfully changed
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
        '404':
          description: User not found
  '/admin/users/{user}/roles':
    get:
      tags:
        - Users
      summary: Get user's roles
      description: Retrieve a list of all roles explicitly assigned to a user
      operationId: getUserRoles
      parameters:
        - $ref: '#/components/parameters/user'
      responses:
        '200':
          $ref: '#/components/responses/ROLE_LIST'
        '404':
          description: User not found
    put:
      tags:
        - Users
      summary: Set user's roles
      description: Overwrite the list of roles explicitly assigned to a user
      operationId: setUserRoles
      parameters:
        - $ref: '#/components/parameters/user'
      requestBody:
        $ref: '#/components/requestBodies/ROLE_LIST'
      responses:
        '200':
          description: Roles successfully updated
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
        '404':
          description: User not found
    post:
      tags:
        - Users
      summary: Add role to user
      operationId: addUserRole
      parameters:
        - $ref: '#/components/parameters/user'
      requestBody:
        $ref: '#/components/requestBodies/ROLENAME'
      responses:
        '204':
          description: Role successfully added
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
        '404':
          description: User/Role not found
  '/admin/users/{user}':
    get:
      tags:
        - Users
      summary: Get User
      description: 'Retrieve attributes, roles, and permissions of a User'
      operationId: getUser
      parameters:
        - $ref: '#/components/parameters/user'
      responses:
        '200':
          $ref: '#/components/responses/USER'
        '404':
          description: User not found
    delete:
      tags:
        - Users
      summary: Delete User
      operationId: deleteUser
      parameters:
        - $ref: '#/components/parameters/user'
      responses:
        '204':
          description: User deleted
        '404':
          description: User not found
  '/admin/users/{user}/superuser':
    get:
      tags:
        - Users
      summary: User is Superuser
      description: Return whether or not a user is a Superuser
      operationId: isSuper
      parameters:
        - $ref: '#/components/parameters/user'
      responses:
        '200':
          $ref: '#/components/responses/SUPERUSER'
        '404':
          description: User not found
  '/admin/users/{user}/roles/{role}':
    delete:
      tags:
        - Users
      summary: Remove role from user
      operationId: removeUserRole
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/role'
      responses:
        '204':
          description: Role successfully removed
        '404':
          description: User/Role not found
  '/admin/roles/{role}':
    delete:
      tags:
        - Roles
      summary: Delete role
      operationId: deleteRole
      parameters:
        - $ref: '#/components/parameters/role'
        - name: force
          in: query
          description: Whether to force delete if role is assigned to users
          schema:
            type: boolean
      responses:
        '204':
          description: Role deleted
        '404':
          description: Role not found
  '/admin/roles//{role}/users':
    get:
      tags:
        - Roles
      summary: Get users with role
      description: Returns a list of all users that have a specific role
      operationId: getUsersWithRole
      parameters:
        - $ref: '#/components/parameters/role'
      responses:
        '200':
          $ref: '#/components/responses/USER_LIST'
        '404':
          description: Role not found
  /admin/roles:
    get:
      tags:
        - Roles
      summary: List Roles
      description: Get the names of all roles in the system
      operationId: listRoles
      responses:
        '200':
          $ref: '#/components/responses/ROLE_LIST'
    post:
      tags:
        - Roles
      summary: Add role
      operationId: addRole
      requestBody:
        $ref: '#/components/requestBodies/ROLENAME'
      responses:
        '201':
          description: Role added
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
  '/admin/permissions/user/{user}':
    get:
      tags:
        - Permissions
      summary: Get user permissions
      description: Get all permissions assigned to a given user
      operationId: getUserPermissions
      parameters:
        - $ref: '#/components/parameters/user'
      responses:
        '200':
          $ref: '#/components/responses/PERMISSION_LIST'
        '404':
          description: User not found
    put:
      tags:
        - Permissions
      summary: Add User Permission
      description: Grant a permission directly to a specified user
      operationId: addUserPermission
      parameters:
        - $ref: '#/components/parameters/user'
      requestBody:
        $ref: '#/components/requestBodies/PERMISSION'
      responses:
        '201':
          description: Permission added
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
        '404':
          description: User not found
  '/admin/permissions/effective/user/{user}':
    get:
      tags:
        - Permissions
      summary: Get effective user permissions
      description: Get all permissions assigned to a given user as well as those granted by assigned roles
      operationId: getEffectiveUserPermissions
      parameters:
        - $ref: '#/components/parameters/user'
      responses:
        '200':
          $ref: '#/components/responses/PERMISSION_LIST'
        '404':
          description: User not found
  '/admin/permissions/user/{user}/delete':
    post:
      tags:
        - Permissions
      summary: Delete User Permission
      description: Revoke a permission from a given user
      operationId: deleteUserPermission
      parameters:
        - $ref: '#/components/parameters/user'
      requestBody:
        $ref: '#/components/requestBodies/PERMISSION'
      responses:
        '201':
          description: Permission removed
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
        '404':
          description: Permission not found
  '/admin/permissions/role/{role}/delete':
    post:
      tags:
        - Permissions
      summary: Delete Role Permission
      description: Remove a permission from a given role
      operationId: deleteRolePermission
      parameters:
        - $ref: '#/components/parameters/role'
      requestBody:
        $ref: '#/components/requestBodies/PERMISSION'
      responses:
        '201':
          description: Permission removed
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
        '404':
          description: Permission not found
  '/admin/permissions/role/{role}':
    get:
      tags:
        - Permissions
      summary: Get role permissions
      description: Get all permissions attributed to a given role
      operationId: getRolePermissions
      parameters:
        - $ref: '#/components/parameters/role'
      responses:
        '200':
          $ref: '#/components/responses/PERMISSION_LIST'
        '404':
          description: Role not found
    put:
      tags:
        - Permissions
      summary: Add Role Permission
      description: Add a permission to a specified role
      operationId: addRolePermission
      parameters:
        - $ref: '#/components/parameters/role'
      requestBody:
        $ref: '#/components/requestBodies/PERMISSION'
      responses:
        '201':
          description: Permission added
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
        '404':
          description: Role not found
  '/admin/queries/{query}':
    get:
      tags:
        - Queries
      summary: Get query
      description: Get details of a specific query
      operationId: getQuery
      parameters:
        - $ref: '#/components/parameters/query'
        - name: query
          in: path
          description: Query name
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/QUERY_LIST'
    delete:
      tags:
        - Queries
      summary: Kill query
      operationId: killQuery
      parameters:
        - $ref: '#/components/parameters/query'
        - name: query
          in: path
          description: Query name
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Query killed
        '404':
          description: Query not found
  /admin/queries:
    get:
      tags:
        - Queries
      summary: List queries
      description: Get a list of all running queries
      operationId: listQueries
      responses:
        '200':
          $ref: '#/components/responses/QUERY_LIST'
  /admin/queries/stored:
    get:
      tags:
        - Queries
      summary: List stored queries
      operationId: listStoredQueries
      responses:
        '200':
          description: RDF serialization of server's stored queries
          content:
            text/turtle:
              examples:
                STORED_QUERY_TURTLE:
                  description: STORED_QUERY_TURTLE
                  $ref: '#/components/examples/STORED_QUERY_TURTLE'
            application/trig:
              examples:
                STORED_QUERY_TRIG:
                  description: STORED_QUERY_TRIG
                  $ref: '#/components/examples/STORED_QUERY_TRIG'
            application/rdf+xml:
              examples:
                STORED_QUERY_RDFXML:
                  description: STORED_QUERY_RDFXML
                  $ref: '#/components/examples/STORED_QUERY_RDFXML'
            application/n-triples:
              examples:
                STORED_QUERY_NTRIPLESQUADS:
                  description: STORED_QUERY_NTRIPLESQUADS
                  $ref: '#/components/examples/STORED_QUERY_NTRIPLESQUADS'
            application/n-quads:
              examples:
                STORED_QUERY_NTRIPLESQUADS:
                  description: STORED_QUERY_NTRIPLESQUADS
                  $ref: '#/components/examples/STORED_QUERY_NTRIPLESQUADS'
            application/ld+json: {}
    put:
      tags:
        - Queries
      summary: Update stored query
      description: 'Add stored query, overwriting if a query with that name already exists'
      operationId: updateStoredQuery
      requestBody:
        content:
          text/turtle:
            examples:
              STORED_QUERY_TURTLE:
                description: STORED_QUERY_TURTLE
                $ref: '#/components/examples/STORED_QUERY_TURTLE'
          application/trig:
            examples:
              STORED_QUERY_TRIG:
                description: STORED_QUERY_TRIG
                $ref: '#/components/examples/STORED_QUERY_TRIG'
          application/rdf+xml:
            examples:
              STORED_QUERY_RDFXML:
                description: STORED_QUERY_RDFXML
                $ref: '#/components/examples/STORED_QUERY_RDFXML'
          application/n-triples:
            examples:
              STORED_QUERY_NTRIPLESQUADS:
                description: STORED_QUERY_NTRIPLESQUADS
                $ref: '#/components/examples/STORED_QUERY_NTRIPLESQUADS'
          application/n-quads:
            examples:
              STORED_QUERY_NTRIPLESQUADS:
                description: STORED_QUERY_NTRIPLESQUADS
                $ref: '#/components/examples/STORED_QUERY_NTRIPLESQUADS'
          application/ld+json: {}
        required: true
      responses:
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
    post:
      tags:
        - Queries
      summary: Add stored query
      operationId: addStoredQuery
      requestBody:
        content:
          text/turtle:
            examples:
              STORED_QUERY_TURTLE:
                description: STORED_QUERY_TURTLE
                $ref: '#/components/examples/STORED_QUERY_TURTLE'
          application/trig:
            examples:
              STORED_QUERY_TRIG:
                description: STORED_QUERY_TRIG
                $ref: '#/components/examples/STORED_QUERY_TRIG'
          application/rdf+xml:
            examples:
              STORED_QUERY_RDFXML:
                description: STORED_QUERY_RDFXML
                $ref: '#/components/examples/STORED_QUERY_RDFXML'
          application/n-triples:
            examples:
              STORED_QUERY_NTRIPLESQUADS:
                description: STORED_QUERY_NTRIPLESQUADS
                $ref: '#/components/examples/STORED_QUERY_NTRIPLESQUADS'
          application/n-quads:
            examples:
              STORED_QUERY_NTRIPLESQUADS:
                description: STORED_QUERY_NTRIPLESQUADS
                $ref: '#/components/examples/STORED_QUERY_NTRIPLESQUADS'
          application/ld+json: {}
        required: true
      responses:
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
        '422':
          description: Stored query already exists
    delete:
      tags:
        - Queries
      summary: Delete all stored queries
      operationId: clearAllStoredQueries
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  '/admin/queries/stored/{query}':
    get:
      tags:
        - Queries
      summary: Get stored query
      operationId: getStoredQuery
      parameters:
        - $ref: '#/components/parameters/query'
        - name: query
          in: path
          description: Query name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: RDF serialization of chosen stored query
          content:
            text/turtle:
              examples:
                STORED_QUERY_TURTLE:
                  description: STORED_QUERY_TURTLE
                  $ref: '#/components/examples/STORED_QUERY_TURTLE'
            application/trig:
              examples:
                STORED_QUERY_TRIG:
                  description: STORED_QUERY_TRIG
                  $ref: '#/components/examples/STORED_QUERY_TRIG'
            application/rdf+xml:
              examples:
                STORED_QUERY_RDFXML:
                  description: STORED_QUERY_RDFXML
                  $ref: '#/components/examples/STORED_QUERY_RDFXML'
            application/n-triples:
              examples:
                STORED_QUERY_NTRIPLESQUADS:
                  description: STORED_QUERY_NTRIPLESQUADS
                  $ref: '#/components/examples/STORED_QUERY_NTRIPLESQUADS'
            application/n-quads:
              examples:
                STORED_QUERY_NTRIPLESQUADS:
                  description: STORED_QUERY_NTRIPLESQUADS
                  $ref: '#/components/examples/STORED_QUERY_NTRIPLESQUADS'
            application/ld+json: {}
        '404':
          description: Query does not exist
    delete:
      tags:
        - Queries
      summary: Delete stored query
      operationId: deleteStoredQuery
      parameters:
        - $ref: '#/components/parameters/query'
        - name: query
          in: path
          description: Query name
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Query deleted
        '404':
          description: Query does not exist
  /admin/functions/stored:
    get:
      tags:
        - Stored Functions
      summary: Get Stored Functions
      description: 'Retrieve all stored functions on the server, or optionally just the function specified in the query string parameter'
      operationId: exportStoredFunctions
      parameters:
        - name: name
          in: query
          description: The name of the stored function
          schema:
            type: string
      responses:
        '200':
          content:
            text/plain:
              examples:
                STORED_FUNCTION:
                  description: STORED_FUNCTION
                  $ref: '#/components/examples/STORED_FUNCTION'
        '400':
          description: Function does not exist
    post:
      tags:
        - Stored Functions
      summary: Add Stored Function
      operationId: addStoredFunction
      requestBody:
        content:
          text/plain:
            examples:
              STORED_FUNCTION:
                description: STORED_FUNCTION
                $ref: '#/components/examples/STORED_FUNCTION'
        required: true
      responses:
        '204':
          description: Function added
        '422':
          description: Function with the given name exists
    delete:
      tags:
        - Stored Functions
      summary: Delete Stored Functions
      description: 'Delete all stored functions on the server, or optionally just the function specified in the query string parameter'
      operationId: deleteStoredFunction
      parameters:
        - name: name
          in: query
          description: The name of the stored function
          schema:
            type: string
      responses:
        '204':
          description: Function deleted
        '400':
          description: Function does not exist
  '/admin/functions/stored/{name}':
    get:
      tags:
        - Stored Functions
      summary: Get Stored Function
      operationId: getStoredFunction
      parameters:
        - $ref: '#/components/parameters/name'
      responses:
        '200':
          content:
            text/plain:
              examples:
                STORED_FUNCTION:
                  description: STORED_FUNCTION
                  $ref: '#/components/examples/STORED_FUNCTION'
        '400':
          description: Function does not exist
    delete:
      tags:
        - Stored Functions
      summary: Delete Stored Function
      description: Delete the stored function specified in the query string parameter
      operationId: deleteStoredFunctionNamed
      parameters:
        - $ref: '#/components/parameters/name'
      responses:
        '204':
          description: Function deleted
        '400':
          description: Function does not exist
components:
  schemas:
    GENERIC_RESPONSE_MESSAGE:
      required:
        - message
      properties:
        message:
          type: string
          example: Successfully executed request
    GENERIC_RESPONSE_ERROR_MESSAGE:
      required:
        - message
      properties:
        message:
          type: string
          example: 'Unexpected end of file [L9]'
        code:
          type: string
          example: QIEVR2
    GENERIC_JSONLD:
      properties:
        '@id':
          type: string
          example: 'urn:example:Entity1'
        '@type':
          type: string
          example: 'urn:example:Entity'
        'urn:example:hasProp':
          required:
            - '@id'
          type: array
          items:
            required:
              - '@value'
            properties:
              '@type':
                type: string
                example: 'http://www.w3.org/2001/XMLSchema#integer'
              '@value':
                type: string
                example: '42'
    GENERIC_JSONLD_OBF:
      properties:
        '@id':
          type: string
          example: 'tag:stardog:api:obf:b55b5d6354699b339940e8be603eb75c220e3110eb1d4143ffd6d3abd5679154'
        '@type':
          type: string
          example: 'tag:stardog:api:obf:9f8e6dca5e5e240793e4ebf3c3a8b23f3654018b38457dbb58a6ba802a120a42'
        'tag:stardog:api:obf:223ca9493ab57efa04fdc9b245cb86c22d00c88cf6de8f99135f78d06fd10fab':
          type: array
          items:
            properties:
              '@type':
                type: string
                example: 'tag:stardog:api:obf:d00c88d06fd10fa223ca9493ab57efa04fdc9b245cb86c22b8cf6de8f99135f7'
              '@value':
                type: string
                example: c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2
    JSON_NAMESPACES:
      required:
        - namespaces
      properties:
        namespaces:
          type: array
          items:
            required:
              - prefix
              - name
            properties:
              prefix:
                type: string
                example: rdfs
              name:
                type: string
                example: 'http://www.w3.org/2000/01/rdf-schema#'
    JSON_CONFIG_PROPERTIES:
      minProperties: 1
      additionalProperties:
        properties:
          name:
            type: string
            example: reasoning.sameas
          type:
            type: string
            example: Enum
          mutable:
            type: boolean
          mutableWhileOnline:
            type: boolean
            description: Can be changed while the database is online
          category:
            type: string
            example: Reasoning
          label:
            type: string
            example: SameAs
          description:
            type: string
            example: 'Option to enable owl:sameAs reasoning. When this option is set to ON reflexive, symmetric, and transitive closure of the owl:sameAs triples in the database is computed. When it is set to FULL, owl:sameAs inferences are computed based on the schema axioms such as functional properties'
          possibleValues:
            type: array
            example:
              - 'OFF'
              - 'ON'
              - FULL
            items:
              type: string
          defaultValue:
            type: string
            example: 'OFF'
    DB_OFFLINE_ONLINE:
      required:
        - timeout
      properties:
        timeout:
          type: integer
          description: timeout in ms
          format: int32
    DB_CREATE:
      required:
        - root
      properties:
        root:
          required:
            - dbname
            - options
            - files
          properties:
            dbname:
              type: string
              example: myDb
            options:
              type: object
            files:
              type: array
              items:
                required:
                  - filename
                properties:
                  filename:
                    type: string
                    example: fileX.ttl
                  context:
                    type: string
                    example: 'urn:my:graph'
          example: '{"dbname": "myDb", "options": {}, "files": [ {"filename": "file1.ttl"} ] }'
      additionalProperties:
        type: string
        format: binary
    COMMIT_RESULT:
      required:
        - added
        - removed
      properties:
        added:
          type: integer
          description: Approximate number of triples added
          format: int32
          example: 42
        removed:
          type: integer
          description: Approximate number of triples removed
          format: int32
          example: 29
    TRANSACTION:
      required:
        - id
        - db
        - user
        - startTime
      properties:
        id:
          type: string
          format: UUID
          example: 4ea1ebac-48f0-459c-a9a7-6cad7189403d
        db:
          type: string
          example: myDb
        user:
          type: string
          example: admin
        startTime:
          type: long
          description: Unix timestamp when transaction started
          example: 1579812754096
    SPARQL_QUERY:
      required:
        - query
      properties:
        query:
          type: string
          example: |-
            PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
            PREFIX : <http://example.org/stardog#>
             
            SELECT ?s ?label WHERE {
                ?s a :Example ;
                   rdfs:label ?label
            }
        reasoning:
          type: boolean
          description: Enable Reasoning
    SPARQL_RESULTS_JSON:
      required:
        - head
        - results
      properties:
        head:
          required:
            - vars
          properties:
            vars:
              type: array
              items:
                type: string
        results:
          required:
            - bindings
          properties:
            bindings:
              type: array
              items:
                additionalProperties:
                  required:
                    - type
                    - value
                  properties:
                    type:
                      type: string
                      example: literal
                    value:
                      type: string
                      example: '42'
    QUERY_PLAN_JSON:
      required:
        - prefixes
        - dataset
        - plan
      properties:
        prefixes:
          additionalProperties:
            type: string
        dataset:
          type: object
        plan:
          $ref: '#/components/schemas/PLAN_NODE'
    PLAN_NODE:
      properties:
        label:
          type: string
          example: MergeJoin(?s)
        cardinality:
          type: integer
          format: int32
          example: 42
        children:
          type: array
          items:
            $ref: '#/components/schemas/PLAN_NODE'
    USER_LIST:
      required:
        - users
      properties:
        users:
          type: array
          items:
            type: string
    USER_CREATE:
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    USER_PASSWD:
      required:
        - password
      properties:
        password:
          type: string
    ROLE_LIST:
      required:
        - roles
      properties:
        roles:
          type: array
          items:
            type: string
    ROLENAME:
      required:
        - rolename
      properties:
        rolename:
          type: string
    ENABLED:
      required:
        - enabled
      properties:
        enabled:
          type: boolean
    SUPERUSER:
      required:
        - superuser
      properties:
        superuser:
          type: boolean
    USER:
      required:
        - enabled
        - superuser
        - roles
        - permissions
      properties:
        enabled:
          type: boolean
        superuser:
          type: boolean
        roles:
          type: array
          items:
            type: string
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/PERMISSION_WITH_EXPLICIT'
    PERMISSION:
      required:
        - action
        - resource_type
        - resource
      properties:
        action:
          type: string
          enum:
            - read
            - write
            - create
            - delete
            - revoke
            - grant
            - execute
            - all
        resource_type:
          type: string
          enum:
            - ALL
            - USER
            - ROLE
            - ROLE_ASSIGNMENT
            - PERMISSION
            - DATABASE
            - NAMED_GRAPH
            - VIRTUAL_GRAPH
            - DBMS_ADMIN
            - DATABASE_METADATA
            - DATABASE_ADMIN
        resource:
          type: array
          items:
            type: string
    PERMISSION_WITH_EXPLICIT:
      required:
        - action
        - resource_type
        - resource
      properties:
        action:
          type: string
          enum:
            - read
            - write
            - create
            - delete
            - revoke
            - grant
            - execute
            - all
        resource_type:
          type: string
          enum:
            - ALL
            - USER
            - ROLE
            - ROLE_ASSIGNMENT
            - PERMISSION
            - DATABASE
            - NAMED_GRAPH
            - VIRTUAL_GRAPH
            - DBMS_ADMIN
            - DATABASE_METADATA
            - DATABASE_ADMIN
        resource:
          type: array
          items:
            type: string
        explicit:
          type: boolean
          description: Whether this permission is explicitly granted to the user versus granted via a role
    PERMISSION_LIST:
      required:
        - permissions
      properties:
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/PERMISSION'
    QUERY_LIST:
      required:
        - queries
      properties:
        queries:
          type: array
          items:
            $ref: '#/components/schemas/QUERY'
    QUERY:
      required:
        - query
        - db
        - endTime
        - startTime
        - id
        - kernelId
        - timeout
        - user
        - reasoning
        - status
      properties:
        query:
          type: string
          example: 'SELECT * WHERE {?s ?p ?o}'
        db:
          type: string
          description: The database on which the query is running
        endTime:
          type: long
          description: 'The UNIX timestamp at which the query ended, or -1 if it is still running'
        startTime:
          type: long
          description: The UNIX timestamp when the query started running
        id:
          type: string
        kernelId:
          type: string
        timeout:
          type: long
          description: 'The amount of time (in ms) after which the query will time out, or -1 if it will not time out'
        user:
          type: string
          description: The user that initiated the query
        reasoning:
          type: boolean
          description: Whether reasoning/inference is enabled on the query
        reasoningSchema:
          type: string
        status:
          type: string
          enum:
            - Not started
            - Pre-execution
            - Running
            - Terminating
            - Done
    BITES_POST_DOC:
      properties:
        rdfExtractors:
          type: string
          example: 'tika,entities'
        testExtractors:
          type: string
          example: tika
        keyAssertions:
          type: boolean
          description: Whether named graph contents should be retained for the document if it already exists
      additionalProperties:
        type: string
        format: binary
  responses:
    EMPTY_SUCCESS:
      description: Operation successful
    GENERIC_RESPONSE_MESSAGE:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GENERIC_RESPONSE_MESSAGE'
    GENERIC_RESPONSE_ERROR_MESSAGE:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GENERIC_RESPONSE_ERROR_MESSAGE'
    DB_TX_404:
      description: Database/Transaction not found (See SD-Error-Code)
      headers:
        SD-Error-Code:
          description: |-
            5 - Transaction Not Found  
            6 - Database Not Found
          schema:
            type: integer
            format: int32
            example: 42
    INVALID_QUERY:
      description: Invalid query sent
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GENERIC_RESPONSE_ERROR_MESSAGE'
    JSON_CONFIG_PROPERTIES:
      description: JSON object detailing all metadata options
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JSON_CONFIG_PROPERTIES'
    ROLE_LIST:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ROLE_LIST'
    USER_LIST:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/USER_LIST'
    USER:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/USER'
    ENABLED:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ENABLED'
    SUPERUSER:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SUPERUSER'
    MALFORMED_REQUEST_400:
      description: Malformed request body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GENERIC_RESPONSE_ERROR_MESSAGE'
    PERMISSION_LIST:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PERMISSION_LIST'
    QUERY_LIST:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/QUERY_LIST'
    QUERY:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/QUERY'
  parameters:
    db:
      name: db
      in: path
      description: Database name
      required: true
      schema:
        type: string
      example: myDb
    txid:
      name: txid
      in: path
      description: Transaction ID
      required: true
      schema:
        type: string
        format: UUID
        example: 4ea1ebac-48f0-459c-a9a7-6cad7189403d
    graph-uri:
      name: graph-uri
      in: query
      description: Named Graph / Context
      required: false
      schema:
        type: string
        format: URI
      example: 'https://stardog.com/graphs/myGraph'
    reasoning:
      name: reasoning
      in: query
      description: Enable Reasoning
      schema:
        type: boolean
    query:
      name: query
      in: query
      description: SPARQL query to run
      required: true
      schema:
        type: string
    user:
      name: user
      in: path
      description: Username
      required: true
      schema:
        type: string
    role:
      name: role
      in: path
      description: Role name
      required: true
      schema:
        type: string
    name:
      name: name
      in: path
      description: The name of the stored function
      required: true
      schema:
        type: string
  examples:
    GENERIC_TURTLE:
      value: "@prefix : <urn:example:> .\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\n@prefix stardog: <tag:stardog:api:> .\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n\n<urn:example:Entity1> a <urn:example:Entity> ;\n\t<urn:example:hasProp> 42 ."
    GENERIC_TURTLE_OBF:
      value: |-
        @prefix : <http://api.stardog.com/> .
        @prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
        @prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
        @prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
        @prefix owl: <http://www.w3.org/2002/07/owl#> .
        @prefix stardog: <tag:stardog:api:> .

        <tag:stardog:api:obf:b55b5d6354699b339940e8be603eb75c220e3110eb1d4143ffd6d3abd5679154> a <tag:stardog:api:obf:9f8e6dca5e5e240793e4ebf3c3a8b23f3654018b38457dbb58a6ba802a120a42> ;
           <tag:stardog:api:obf:d00c88d06fd10fa223ca9493ab57efa04fdc9b245cb86c22b8cf6de8f99135f7> "c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2" .
    GENERIC_TRIG:
      value: "@prefix : <urn:example:> .\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\n@prefix stardog: <tag:stardog:api:> .\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n\n{ \t<urn:example:Entity1> a <urn:example:Entity> ;\n\t\t <urn:example:hasProp> 42 .\n}"
    GENERIC_TRIG_OBF:
      value: |-
        @prefix : <http://api.stardog.com/> .
        @prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
        @prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
        @prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
        @prefix owl: <http://www.w3.org/2002/07/owl#> .
        @prefix stardog: <tag:stardog:api:> .

        {
            <tag:stardog:api:obf:b55b5d6354699b339940e8be603eb75c220e3110eb1d4143ffd6d3abd5679154> a <tag:stardog:api:obf:9f8e6dca5e5e240793e4ebf3c3a8b23f3654018b38457dbb58a6ba802a120a42> ;
              <tag:stardog:api:obf:d00c88d06fd10fa223ca9493ab57efa04fdc9b245cb86c22b8cf6de8f99135f7> "c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2" .
        }
    GENERIC_NTRIPLES:
      value: |-
        <urn:example:Entity1> a <urn:example:Entity> .
        <urn:example:Entity1> <urn:example:hasProp> 42 .
    GENERIC_NTRIPLES_OBF:
      value: |-
        <tag:stardog:api:obf:b55b5d6354699b339940e8be603eb75c220e3110eb1d4143ffd6d3abd5679154> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <tag:stardog:api:obf:9f8e6dca5e5e240793e4ebf3c3a8b23f3654018b38457dbb58a6ba802a120a42> .
        <tag:stardog:api:obf:b55b5d6354699b339940e8be603eb75c220e3110eb1d4143ffd6d3abd5679154> <tag:stardog:api:obf:d00c88d06fd10fa223ca9493ab57efa04fdc9b245cb86c22b8cf6de8f99135f7> "c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2" .
    GENERIC_NQUADS:
      value: |-
        <urn:context> <urn:example:Entity1> a <urn:example:Entity> .
        <urn:context> <urn:example:Entity1> <urn:example:hasProp> 42 .
    GENERIC_NQUADS_OBF:
      value: |-
        <tag:stardog:api:obf:e603eb75c220e3110eb1d4143ffd6d3abd5679154b55b5d6354699b339940e8b> <tag:stardog:api:obf:b55b5d6354699b339940e8be603eb75c220e3110eb1d4143ffd6d3abd5679154> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <tag:stardog:api:obf:9f8e6dca5e5e240793e4ebf3c3a8b23f3654018b38457dbb58a6ba802a120a42> .
        <tag:stardog:api:obf:e603eb75c220e3110eb1d4143ffd6d3abd5679154b55b5d6354699b339940e8b> <tag:stardog:api:obf:b55b5d6354699b339940e8be603eb75c220e3110eb1d4143ffd6d3abd5679154> <tag:stardog:api:obf:d00c88d06fd10fa223ca9493ab57efa04fdc9b245cb86c22b8cf6de8f99135f7> "c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2" .
    GENERIC_RDFXML:
      value: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rdf:RDF\n\txmlns=\"http://api.stardog.com/\"\n\txmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n\txmlns:owl=\"http://www.w3.org/2002/07/owl#\"\n\txmlns:rdfs=\"http://www.w3.org/2000/01/rdf-schema#\"\n\txmlns:stardog=\"tag:stardog:api:\"\n\txmlns:xsd=\"http://www.w3.org/2001/XMLSchema#\">\n\n<rdf:Description rdf:about=\"urn:example:Entity1\">\n\t<rdf:type rdf:resource=\"urn:example:Entity\"/>\n\t<hasProp xmlns=\"urn:example:\" rdf:datatype=\"http://www.w3.org/2001/XMLSchema#integer\">42</hasProp>\n</rdf:Description>\n\n</rdf:RDF>"
    GENERIC_RDFXML_OBF:
      value: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rdf:RDF\n\txmlns=\"http://api.stardog.com/\"\n\txmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n\txmlns:owl=\"http://www.w3.org/2002/07/owl#\"\n\txmlns:rdfs=\"http://www.w3.org/2000/01/rdf-schema#\"\n\txmlns:stardog=\"tag:stardog:api:\"\n\txmlns:xsd=\"http://www.w3.org/2001/XMLSchema#\">\n\n<rdf:Description rdf:about=\"tag:stardog:api:obf:b55b5d6354699b339940e8be603eb75c220e3110eb1d4143ffd6d3abd5679154\">\n\t<rdf:type rdf:resource=\"tag:stardog:api:obf:9f8e6dca5e5e240793e4ebf3c3a8b23f3654018b38457dbb58a6ba802a120a42\"/>\n\t<d00c88d06fd10fa223ca9493ab57efa04fdc9b245cb86c22b8cf6de8f99135f7 xmlns=\"tag:stardog:api:obf:\" rdf:datatype=\"http://www.w3.org/2001/XMLSchema#string\">c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2</d00c88d06fd10fa223ca9493ab57efa04fdc9b245cb86c22b8cf6de8f99135f7>\n</rdf:Description>\n\n</rdf:RDF>"
    SPARQL_QUERY:
      value: |-
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        PREFIX : <http://example.org/stardog#>
         
        SELECT ?s ?label WHERE {
            ?s a :Example ;
               rdfs:label ?label
        }
    SPARQL_UPDATE:
      value: |-
        PREFIX : <http://example.org/stardog#>

        DELETE {
           ?s a :OldType
        }
        INSERT {
           ?s a :NewType
        }
        WHERE {
           ?s a :OldType
        }
    SPARQL_RESULTS_XML:
      value: |-
        <?xml version='1.0' encoding='UTF-8'?>
        <sparql xmlns='http://www.w3.org/2005/sparql-results#'>
            <head>
                <variable name='s'/>
                <variable name='label'/>
            </head>
            <results>
                <result>
                    <binding name='s'>
                        <uri>http://example.org/stardog#Example1</uri>
                    </binding>
                    <binding name='label'>
                        <literal>42</literal>
                    </binding>
                </result>
                <result>
                    <binding name='s'>
                        <uri>http://example.org/stardog#Example2</uri>
                    </binding>
                    <binding name='label'>
                        <literal>foo</literal>
                    </binding>
                </result>
            </results>
        </sparql>
    SPARQL_RESULTS_CSV:
      value: |-
        s,label
        http://example.org/stardog#Example1,42
        http://example.org/stardog#Example2,foo
    SPARQL_RESULTS_TSV:
      value: "?s\t?label\n<http://example.org/stardog#Example1>\t\"42\"\n<http://example.org/stardog#Example2>\t\"foo\""
    QUERY_PLAN_TEST:
      value: |-
        prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        prefix : <http://example.org/stardog#>

        Projection(?s, ?label) [#625]
        `─ MergeJoin(?s) [#625]
           +─ Scan[POSC](?s, <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>, :Example) [#1]
           `─ Scan[PSOC](?s, rdfs:label, ?label) [#718K]
    STORED_QUERY_TURTLE:
      value: |-
        @prefix system: <http://system.stardog.com/> .

        system:QuerymyQuery a system:StoredQuery ;
           system:queryName "myQuery" ;
           system:queryString "select * {?s ?p ?o}" ;
           system:queryCreator "admin" ;
           system:queryDatabase "myDb" .
    STORED_QUERY_TRIG:
      value: |-
        @prefix system: <http://system.stardog.com/> .

        {
            system:QuerymyQuery a system:StoredQuery ;
              system:queryName "myQuery" ;
              system:queryString "select * {?s ?p ?o}" ;
              system:queryCreator "admin" ;
              system:queryDatabase "myDb" .
        }
    STORED_QUERY_NTRIPLESQUADS:
      value: |-
        <http://system.stardog.com/QuerymyQuery> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://system.stardog.com/StoredQuery> .
        <http://system.stardog.com/QuerymyQuery> <http://system.stardog.com/queryName> "myQuery" .
        <http://system.stardog.com/QuerymyQuery> <http://system.stardog.com/queryString> "select * {?s ?p ?o}" .
        <http://system.stardog.com/QuerymyQuery> <http://system.stardog.com/queryCreator> "admin" .
        <http://system.stardog.com/QuerymyQuery> <http://system.stardog.com/queryDatabase> "myDb" .
    STORED_QUERY_RDFXML:
      value: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rdf:RDF\n\txmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n\txmlns:system=\"http://system.stardog.com/\">\n    <rdf:Description rdf:about=\"http://system.stardog.com/QuerymyQuery\">\n        <rdf:type rdf:resource=\"http://system.stardog.com/StoredQuery\"/>\n        <system:queryName rdf:datatype=\"http://www.w3.org/2001/XMLSchema#string\">myQuery</system:queryName>\n        <system:queryString rdf:datatype=\"http://www.w3.org/2001/XMLSchema#string\">select * {?s ?p ?o}</system:queryString>\n        <system:queryCreator rdf:datatype=\"http://www.w3.org/2001/XMLSchema#string\">admin</system:queryCreator>\n        <system:queryDatabase rdf:datatype=\"http://www.w3.org/2001/XMLSchema#string\">myDb</system:queryDatabase>\n    </rdf:Description>\n</rdf:RDF>"
    STORED_FUNCTION:
      value: |-
        FUNCTION permutation(?n,?r) {
           (factorial(?n) / factorial((?n - ?r)))
        }
  requestBodies:
    ROLENAME:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ROLENAME'
    ENABLED:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ENABLED'
    USER_CREATE:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/USER_CREATE'
    USER_PASSWD:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/USER_PASSWD'
    DB_OFFLINE_ONLINE:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DB_OFFLINE_ONLINE'
    ROLE_LIST:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ROLE_LIST'
    PERMISSION:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PERMISSION'
    STORED_FUNCTION:
      content:
        text/plain:
          example:
            $ref: '#/components/examples/STORED_FUNCTION'
x-tagGroups:
  - name: Server
    tags:
      - Server Admin
      - Server Status/Metrics
      - Queries
      - Stored Functions
  - name: Database
    tags:
      - DB Admin
      - Transactions
      - Graph Store Protocol
      - SPARQL
  - name: Security
    tags:
      - Users
      - Roles
      - Permissions
