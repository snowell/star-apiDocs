openapi: 3.0.1
info:
  title: Stardog HTTP API
  description: |
    # Overview
    Here be an overview of some kind

    # Error Codes
    Here are explanations of what the various error codes mean:

    Error Code | Meaning
    -----------|--------
    000012 | UNKNOWN
    000IA2 | ILLEGAL_ARGUMENT
    000SD4 | SHUTTING_DOWN
    00UOE2 | UNSUPPORTED_OPERATION
    0D0012 | UNKNOWN_DATABASE_EXCEPTION
    0D0CE3 | DATABASE_CONSISTENCY_EXCEPTION
    0D0DC2 | DATABASE_CONFLICT
    0D0DE2 | DATABASE_EXISTS
    0D0DU2 | DATABASE_UNKNOWN
    0D0TU2 | TRANSACTION_UNKNOWN
    0DICC2 | INVALID_CONFIGURATION
    0DIDN2 | INVALID_DATABASE_NAME
    0DIDS2 | INVALID_DATABASE_STATE
    BIUDE2 | MISSING_DOCUMENT
    HS0012 | UNKNOWN_CONNECTION_EXCEPTION
    HSJSE2 | JSON_SYNTAX_EXCEPTION
    HSJSO2 | JSON_EXCEPTION
    HSSSL3 | SSL_EXCEPTION
    QE0012 | UNKNOWN_QUERY_EXCEPTION
    QE0FE2 | FUNCTION_EXISTS
    QE0PE2 | PARSE_EXCEPTION
    QE0QE2 | QUERY_EXISTS
    QECTP2 | CANNOT_TRANSLATE_PLAN
    QEFNF2 | FUNCTION_NOT_FOUND
    QEIQT2 | INVALID_QUERY_TYPE
    QEIVR2 | INVALID_RDF
    QEMAQ2 | MALFORMED_QUERY
    QEONS2 | OPERATION_NOT_SUPPORTED
    QEQNF2 | QUERY_NOT_FOUND
    QEQOE2 | OPERATOR_EXCEPTION
    QEQPE2 | QUERY_PARSE_EXCEPTION
    QEWCE2 | WRITE_CONFLICT_EXCEPTION
    SE0012 | UNKNOWN_SECURITY_EXCEPTION
    SE0IP2 | ILLEGAL_PASSWORD
    SE0RE2 | SECURITY_RESOURCE_EXISTS
    SEAEE2 | AUTHENTICATION_EXCEPTION
    SEAOE2 | AUTHORIZATION_EXCEPTION
    SEIPT2 | INCORRECT_PRINCIPAL_TRANSACTION
    SERIU2 | SECURITY_RESOURCE_IN_USE
    SERNF2 | SECURITY_RESOURCE_NOT_FOUND
    SERNI2 | SECURITY_RESOURCE_NAME_INVALID
    SERTI2 | SECURITY_RESOURCE_TYPE_INVALID
    TXFTE2 | FATAL_TRANSACTION_EXCEPTION
    TXHME2 | HEURISTIC_MIXED_EXCEPTION
    TXHRE2 | HEURISTIC_ROLLBACK
  contact:
    url: 'https://stardog.com'
  version: 7.3.5-SNAPSHOT-20200902
tags:
  - name: Server Admin
    description: Server administration operations. May require superuser permissions
  - name: DB Admin
    description: Database administration operations
  - name: Transactions
    description: Transactional operations
  - name: Graph Store Protocol
    description: 'Operations on named graphs as detailed in https://www.w3.org/TR/sparql11-http-rdf-update/'
  - name: SPARQL
    description: SPARQL Queries
  - name: Server Status/Metrics
    description: ''
  - name: Users
    description: Operations on system users
  - name: Roles
    description: Operations on system roles
  - name: Permissions
    description: Operations on system permissions
  - name: Queries
    description: Operations relating to queries running on the server
  - name: Stored Functions
    description: Operations relating to user-defined functions stored on the server
  - name: BITES
    description: 'Operations for BITES, the unstructured data service'
  - name: GraphQL
    description: GraphQL Queries
  - name: Integrity Constraints
    description: ''
  - name: Data Caching
    description: Operations for working with cached data
  - name: Reasoning
    description: Operations for interacting with the inference engine
  - name: Virtual Graphs
    description: Operations for virtualizing structured data
  - name: Cluster Admin
    description: Cluster administration operations
paths:
  /admin/shutdown:
    post:
      tags:
        - Server Admin
      summary: Shutdown server
      operationId: shutdown
      responses:
        '200':
          description: Shutdown request received
        '405':
          description: Remote shutdowns not allowed
  /admin/alive:
    get:
      tags:
        - Server Admin
      summary: Server aliveness check
      description: Determine whether the server is running
      operationId: aliveCheck
      responses:
        '200':
          description: Server is running
  /admin/healthcheck:
    get:
      tags:
        - Server Admin
      summary: Server health check
      description: Determine whether the server is running and able to accept traffic
      operationId: healthCheck
      responses:
        '200':
          description: Server is running and healthy
        '503':
          description: Server is unavailable
  '/{db}/namespaces':
    get:
      tags:
        - DB Admin
      summary: Get namespaces
      description: Retrieve the namespaces stored in the database
      operationId: getNamespaces
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      responses:
        '200':
          description: A JSON object listing the prefixes and IRIs of the stored namespaces
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSON_NAMESPACES'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
    post:
      tags:
        - DB Admin
      summary: Import namespaces
      description: Add namespaces to the database via a block or blocks of RDF that declares them
      operationId: importNamespaces
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      requestBody:
        content:
          text/turtle:
            examples:
              GENERIC_TURTLE:
                description: GENERIC_TURTLE
                $ref: '#/components/examples/GENERIC_TURTLE'
          application/trig:
            examples:
              GENERIC_TRIG:
                description: GENERIC_TRIG
                $ref: '#/components/examples/GENERIC_TRIG'
          application/rdf+xml:
            examples:
              GENERIC_RDFXML:
                description: GENERIC_RDFXML
                $ref: '#/components/examples/GENERIC_RDFXML'
          application/n-triples:
            examples:
              GENERIC_NTRIPLES:
                description: GENERIC_NTRIPLES
                $ref: '#/components/examples/GENERIC_NTRIPLES'
          application/n-quads:
            examples:
              GENERIC_NQUADS:
                description: GENERIC_NQUADS
                $ref: '#/components/examples/GENERIC_NQUADS'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/GENERIC_JSONLD'
        required: true
      responses:
        '200':
          description: A JSON object listing the prefixes and IRIs of the stored namespaces
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSON_NAMESPACES'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/model':
    get:
      tags:
        - DB Admin
      summary: Generate Model
      description: Generate the reasoning model used by this database in various formats
      operationId: generateModel
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - $ref: '#/components/parameters/reasoning'
        - name: output
          in: query
          description: 'Desired output format (text, owl, shacl, sql, graphql)'
          schema:
            type: string
      responses:
        '200':
          description: RDF serialization of the reasoning model
          content:
            text/turtle:
              examples:
                GENERIC_TURTLE:
                  description: GENERIC_TURTLE
                  $ref: '#/components/examples/GENERIC_TURTLE'
            application/trig:
              examples:
                GENERIC_TRIG:
                  description: GENERIC_TRIG
                  $ref: '#/components/examples/GENERIC_TRIG'
            application/rdf+xml:
              examples:
                GENERIC_RDFXML:
                  description: GENERIC_RDFXML
                  $ref: '#/components/examples/GENERIC_RDFXML'
            application/n-triples:
              examples:
                GENERIC_NTRIPLES:
                  description: GENERIC_NTRIPLES
                  $ref: '#/components/examples/GENERIC_NTRIPLES'
            application/n-quads:
              examples:
                GENERIC_NQUADS:
                  description: GENERIC_NQUADS
                  $ref: '#/components/examples/GENERIC_NQUADS'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/GENERIC_JSONLD'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/export':
    get:
      tags:
        - DB Admin
      summary: Export database
      operationId: export
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: obf
          in: query
          description: 'Path to an obfuscation configuration file, or DEFAULT'
          schema:
            type: string
      responses:
        '200':
          description: RDF serialization of the database
          content:
            text/turtle:
              examples:
                GENERIC_TURTLE:
                  description: GENERIC_TURTLE
                  $ref: '#/components/examples/GENERIC_TURTLE'
            application/trig:
              examples:
                GENERIC_TRIG:
                  description: GENERIC_TRIG
                  $ref: '#/components/examples/GENERIC_TRIG'
            application/rdf+xml:
              examples:
                GENERIC_RDFXML:
                  description: GENERIC_RDFXML
                  $ref: '#/components/examples/GENERIC_RDFXML'
            application/n-triples:
              examples:
                GENERIC_NTRIPLES:
                  description: GENERIC_NTRIPLES
                  $ref: '#/components/examples/GENERIC_NTRIPLES'
            application/n-quads:
              examples:
                GENERIC_NQUADS:
                  description: GENERIC_NQUADS
                  $ref: '#/components/examples/GENERIC_NQUADS'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/GENERIC_JSONLD'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
    post:
      tags:
        - DB Admin
      summary: Export database (obfuscated)
      operationId: exportObfuscated
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      requestBody:
        description: Obfuscation configuration
        content:
          text/turtle:
            example: |-
              @prefix obf: <tag:stardog:api:obf:> .

              [] a obf:Obfuscation ;
                  obf:digest "SHA-256" ;
                  obf:include [
                      obf:position obf:any ;
                      obf:pattern ".*"
                  ] ;

                  obf:exclude [
                      obf:position obf:any ;
                      obf:namespace "rdf"
                  ] ;
                  obf:exclude [
                      obf:position obf:any ;
                      obf:namespace "owl"
                  ] ;
                  obf:exclude [
                      obf:position obf:predicate ;
                      obf:namespace "rdfs"
                  ] ;
        required: true
      responses:
        '200':
          description: Obfuscated RDF serialization of the database
          content:
            text/turtle:
              examples:
                GENERIC_TURTLE_OBF:
                  description: GENERIC_TURTLE_OBF
                  $ref: '#/components/examples/GENERIC_TURTLE_OBF'
            application/trig:
              examples:
                GENERIC_TRIG_OBF:
                  description: GENERIC_TRIG_OBF
                  $ref: '#/components/examples/GENERIC_TRIG_OBF'
            application/rdf+xml:
              examples:
                GENERIC_RDFXML_OBF:
                  description: GENERIC_RDFXML_OBF
                  $ref: '#/components/examples/GENERIC_RDFXML_OBF'
            application/n-triples:
              examples:
                GENERIC_NTRIPLES_OBF:
                  description: GENERIC_NTRIPLES_OBF
                  $ref: '#/components/examples/GENERIC_NTRIPLES_OBF'
            application/n-quads:
              examples:
                GENERIC_NQUADS_OBF:
                  description: GENERIC_NQUADS_OBF
                  $ref: '#/components/examples/GENERIC_NQUADS_OBF'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/GENERIC_JSONLD_OBF'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/size':
    get:
      tags:
        - DB Admin
      summary: Get DB Size
      operationId: size
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: exact
          in: query
          description: Whether to request that the database size be exact instead of approximate
          schema:
            type: boolean
      responses:
        '200':
          description: The size (in triples) of the database
          content:
            text/plain:
              schema:
                type: integer
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  /admin/databases:
    get:
      tags:
        - DB Admin
      summary: List databases
      description: List all the databases in the server
      operationId: listDatabases
      responses:
        '200':
          description: A JSON object listing the databases
          content:
            application/json:
              example:
                databases:
                  - myDb
                  - myOtherDb
    post:
      tags:
        - DB Admin
      summary: Create database
      description: 'Add a new database to the server, optionally with RDF bulk-loaded'
      operationId: createNewDatabase
      requestBody:
        description: A multipart request with a JSON root element and optionally RDF file contents
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DB_CREATE'
      responses:
        '201':
          description: Database created
        '400':
          description: Invalid or malformed request body
  /admin/config_properties:
    get:
      tags:
        - DB Admin
      summary: Get all metadata properties
      description: 'Get information on all database metadata properties, including description and example values'
      operationId: getAllMetaProperties
      responses:
        '200':
          $ref: '#/components/responses/JSON_CONFIG_PROPERTIES'
  '/admin/databases/{db}/offline':
    put:
      tags:
        - DB Admin
      summary: Offline database
      description: Take a database offline
      operationId: offline
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      requestBody:
        $ref: '#/components/requestBodies/DB_OFFLINE_ONLINE'
      responses:
        '200':
          $ref: '#/components/responses/GENERIC_RESPONSE_MESSAGE'
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  /admin/restore_all:
    put:
      tags:
        - DB Admin
      summary: Restore multiple databases
      description: Restore multiple databases from backup
      operationId: restoreAll
      parameters:
        - name: from
          in: query
          description: The location on the server of the backups
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/GENERIC_RESPONSE_MESSAGE'
  '/admin/databases/{db}/options':
    get:
      tags:
        - DB Admin
      summary: Get all DB options
      description: Get the value of every metadata option for a database
      operationId: getAllOptions
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      responses:
        '200':
          description: JSON object detailing all database metadata
          content:
            application/json: {}
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
    put:
      tags:
        - DB Admin
      summary: Get DB options
      description: Get the value of specific metadata options for a database
      operationId: getOptions
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      requestBody:
        content:
          application/json:
            example:
              spatial.result.limit: null
              query.all.graphs: null
        required: true
      responses:
        '200':
          content:
            application/json:
              example:
                spatial.result.limit: 10000
                query.all.graphs: true
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
    post:
      tags:
        - DB Admin
      summary: Set DB options
      description: Set the value of specific metadata options for a database
      operationId: setOption
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      requestBody:
        description: A JSON object with keys and values equal to the desired metadata options
        content:
          application/json:
            example:
              spatial.result.limit: 10000
              query.all.graphs: true
        required: true
      responses:
        '200':
          $ref: '#/components/responses/GENERIC_RESPONSE_MESSAGE'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  /admin/restore:
    put:
      tags:
        - DB Admin
      summary: Restore database
      description: Restore a database from backup
      operationId: restore
      parameters:
        - name: from
          in: query
          description: The location on the server of the backup
          required: true
          schema:
            type: string
        - name: force
          in: query
          description: Whether or not to overwrite an existing database with this backup
          schema:
            type: boolean
        - name: name
          in: query
          description: 'The name of the restored database, if different'
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/GENERIC_RESPONSE_MESSAGE'
  '/admin/databases/{db}/online':
    put:
      tags:
        - DB Admin
      summary: Online database
      description: Bring a database online
      operationId: online
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      responses:
        '200':
          $ref: '#/components/responses/GENERIC_RESPONSE_MESSAGE'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/admin/databases/{db}':
    delete:
      tags:
        - DB Admin
      summary: Drop database
      description: Delete the database
      operationId: dropDatabase
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      responses:
        '200':
          $ref: '#/components/responses/GENERIC_RESPONSE_MESSAGE'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/admin/databases/{db}/repair':
    put:
      tags:
        - DB Admin
      summary: Repair database
      description: Attempt to recover a corrupted database
      operationId: repair
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      responses:
        '200':
          $ref: '#/components/responses/GENERIC_RESPONSE_MESSAGE'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/admin/databases/{db}/optimize':
    put:
      tags:
        - DB Admin
      summary: Optimize database
      description: Optimize the index of a database
      operationId: optimize
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      requestBody:
        description: Configuration parameters
        content:
          application/json: {}
      responses:
        '200':
          $ref: '#/components/responses/GENERIC_RESPONSE_MESSAGE'
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  /admin/databases/backup_all:
    put:
      tags:
        - DB Admin
      summary: Backup all databases
      description: Create a backup of all databases on the server
      operationId: backupAll
      parameters:
        - name: to
          in: query
          description: File location on the server to which to save the backups (defaults to $STARDOG_HOME/.backup)
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/GENERIC_RESPONSE_MESSAGE'
  '/admin/databases/{db}/backup':
    put:
      tags:
        - DB Admin
      summary: Backup a database
      description: Create a backup of a database on the server
      operationId: backup
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: to
          in: query
          description: File location on the server to which to save the backup (defaults to $STARDOG_HOME/.backup)
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/GENERIC_RESPONSE_MESSAGE'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/transaction/begin':
    post:
      tags:
        - Transactions
      summary: Begin a transaction
      operationId: begin
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      responses:
        '200':
          content:
            text/plain:
              example: 067e6162-3b6f-4ae2-a171-2470b63dff00
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
      x-sort-order:
        group: '1'
        order: '1'
  '/{db}/transaction/begin/{txid}':
    post:
      tags:
        - Transactions
      summary: Begin a transaction with specified txid
      operationId: beginTx
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: txid
          $ref: '#/components/parameters/txid'
      responses:
        '200':
          description: Transaction begun
          content:
            text/plain:
              example: 067e6162-3b6f-4ae2-a171-2470b63dff00
        '404':
          description: Database/Transaction does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
      x-sort-order:
        group: '1'
        order: '2'
  '/{db}/transaction/commit/{txid}':
    post:
      tags:
        - Transactions
      summary: Commit a transaction
      operationId: commit
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: txid
          $ref: '#/components/parameters/txid'
      responses:
        '200':
          description: Commit successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/COMMIT_RESULT'
        '404':
          description: Database/Transaction does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
      x-sort-order:
        group: '1'
        order: '3'
  '/{db}/transaction/rollback/{txid}':
    post:
      tags:
        - Transactions
      summary: Rollback a transaction
      operationId: rollback
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: txid
          $ref: '#/components/parameters/txid'
      responses:
        '200':
          $ref: '#/components/responses/EMPTY_SUCCESS'
        '404':
          description: Database/Transaction does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
      x-sort-order:
        group: '1'
        order: '4'
  '/{db}/transaction':
    get:
      tags:
        - Transactions
      summary: List all open transactions on a database
      operationId: listTransactions
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TRANSACTION'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/{txid}/add':
    post:
      tags:
        - Transactions
      summary: Add data within a transaction
      operationId: add
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: txid
          $ref: '#/components/parameters/txid'
        - $ref: '#/components/parameters/graph-uri'
      requestBody:
        content:
          text/turtle:
            examples:
              GENERIC_TURTLE:
                description: GENERIC_TURTLE
                $ref: '#/components/examples/GENERIC_TURTLE'
          application/trig:
            examples:
              GENERIC_TRIG:
                description: GENERIC_TRIG
                $ref: '#/components/examples/GENERIC_TRIG'
          application/rdf+xml:
            examples:
              GENERIC_RDFXML:
                description: GENERIC_RDFXML
                $ref: '#/components/examples/GENERIC_RDFXML'
          application/n-triples:
            examples:
              GENERIC_NTRIPLES:
                description: GENERIC_NTRIPLES
                $ref: '#/components/examples/GENERIC_NTRIPLES'
          application/n-quads:
            examples:
              GENERIC_NQUADS:
                description: GENERIC_NQUADS
                $ref: '#/components/examples/GENERIC_NQUADS'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/GENERIC_JSONLD'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/EMPTY_SUCCESS'
        '404':
          description: Database/Transaction does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/{txid}/remove':
    post:
      tags:
        - Transactions
      summary: Remove data within a transaction
      operationId: remove
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: txid
          $ref: '#/components/parameters/txid'
        - $ref: '#/components/parameters/graph-uri'
      requestBody:
        content:
          text/turtle:
            examples:
              GENERIC_TURTLE:
                description: GENERIC_TURTLE
                $ref: '#/components/examples/GENERIC_TURTLE'
          application/trig:
            examples:
              GENERIC_TRIG:
                description: GENERIC_TRIG
                $ref: '#/components/examples/GENERIC_TRIG'
          application/rdf+xml:
            examples:
              GENERIC_RDFXML:
                description: GENERIC_RDFXML
                $ref: '#/components/examples/GENERIC_RDFXML'
          application/n-triples:
            examples:
              GENERIC_NTRIPLES:
                description: GENERIC_NTRIPLES
                $ref: '#/components/examples/GENERIC_NTRIPLES'
          application/n-quads:
            examples:
              GENERIC_NQUADS:
                description: GENERIC_NQUADS
                $ref: '#/components/examples/GENERIC_NQUADS'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/GENERIC_JSONLD'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/EMPTY_SUCCESS'
        '404':
          description: Database/Transaction does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/{txid}/clear':
    post:
      tags:
        - Transactions
      summary: Clear database within a transaction
      operationId: clear
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: txid
          $ref: '#/components/parameters/txid'
        - $ref: '#/components/parameters/graph-uri'
      responses:
        '200':
          $ref: '#/components/responses/EMPTY_SUCCESS'
        '404':
          description: Database/Transaction does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}':
    get:
      tags:
        - Graph Store Protocol
      summary: GET graph
      description: Retrieves an RDF payload that is a serialization of the named graph paired with the graph IRI in the database
      operationId: getGraph
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: graph
          in: query
          description: IRI of the named graph to retrieve
          schema:
            type: string
        - name: default
          in: query
          description: Include instead of 'query' to operate on the default graph
          schema:
            type: string
      responses:
        '200':
          description: RDF serialization of the named graph
          content:
            text/turtle:
              examples:
                GENERIC_TURTLE:
                  description: GENERIC_TURTLE
                  $ref: '#/components/examples/GENERIC_TURTLE'
            application/trig:
              examples:
                GENERIC_TRIG:
                  description: GENERIC_TRIG
                  $ref: '#/components/examples/GENERIC_TRIG'
            application/rdf+xml:
              examples:
                GENERIC_RDFXML:
                  description: GENERIC_RDFXML
                  $ref: '#/components/examples/GENERIC_RDFXML'
            application/n-triples:
              examples:
                GENERIC_NTRIPLES:
                  description: GENERIC_NTRIPLES
                  $ref: '#/components/examples/GENERIC_NTRIPLES'
            application/n-quads:
              examples:
                GENERIC_NQUADS:
                  description: GENERIC_NQUADS
                  $ref: '#/components/examples/GENERIC_NQUADS'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/GENERIC_JSONLD'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
    put:
      tags:
        - Graph Store Protocol
      summary: PUT graph
      description: Stores the enclosed RDF payload as RDF graph content
      operationId: setGraph
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: graph
          in: query
          description: IRI of the target named graph
          schema:
            type: string
        - name: default
          in: query
          description: Include instead of 'query' to operate on the default graph
          schema:
            type: string
      requestBody:
        content:
          text/turtle:
            examples:
              GENERIC_TURTLE:
                description: GENERIC_TURTLE
                $ref: '#/components/examples/GENERIC_TURTLE'
          application/trig:
            examples:
              GENERIC_TRIG:
                description: GENERIC_TRIG
                $ref: '#/components/examples/GENERIC_TRIG'
          application/rdf+xml:
            examples:
              GENERIC_RDFXML:
                description: GENERIC_RDFXML
                $ref: '#/components/examples/GENERIC_RDFXML'
          application/n-triples:
            examples:
              GENERIC_NTRIPLES:
                description: GENERIC_NTRIPLES
                $ref: '#/components/examples/GENERIC_NTRIPLES'
          application/n-quads:
            examples:
              GENERIC_NQUADS:
                description: GENERIC_NQUADS
                $ref: '#/components/examples/GENERIC_NQUADS'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/GENERIC_JSONLD'
        required: true
      responses:
        '200':
          description: Graph overwritten
        '201':
          description: Graph created
          headers:
            Location:
              style: simple
              schema:
                type: string
                format: URI
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
    post:
      tags:
        - Graph Store Protocol
      summary: POST graph
      description: Merges the enclosed RDF payload with the specified graph content
      operationId: appendToGraph
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: graph
          in: query
          description: IRI of the target named graph
          schema:
            type: string
        - name: default
          in: query
          description: Include instead of 'query' to operate on the default graph
          schema:
            type: string
      requestBody:
        content:
          text/turtle:
            examples:
              GENERIC_TURTLE:
                description: GENERIC_TURTLE
                $ref: '#/components/examples/GENERIC_TURTLE'
          application/trig:
            examples:
              GENERIC_TRIG:
                description: GENERIC_TRIG
                $ref: '#/components/examples/GENERIC_TRIG'
          application/rdf+xml:
            examples:
              GENERIC_RDFXML:
                description: GENERIC_RDFXML
                $ref: '#/components/examples/GENERIC_RDFXML'
          application/n-triples:
            examples:
              GENERIC_NTRIPLES:
                description: GENERIC_NTRIPLES
                $ref: '#/components/examples/GENERIC_NTRIPLES'
          application/n-quads:
            examples:
              GENERIC_NQUADS:
                description: GENERIC_NQUADS
                $ref: '#/components/examples/GENERIC_NQUADS'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/GENERIC_JSONLD'
          multipart/form-data: {}
        required: true
      responses:
        '200':
          description: Graph merged
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
    delete:
      tags:
        - Graph Store Protocol
      summary: DELETE graph
      description: Deletes the RDF graph content identified by either the request or encoded IRI
      operationId: dropGraph
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: graph
          in: query
          description: IRI of the named graph to delete
          schema:
            type: string
        - name: default
          in: query
          description: Include instead of 'query' to operate on the default graph
          schema:
            type: string
      responses:
        '200':
          description: Graph deleted
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
    head:
      tags:
        - Graph Store Protocol
      summary: HEAD graph
      description: Test dereferenceable IRIs for validity and accessibility
      operationId: checkGraph
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: graph
          in: query
          description: IRI of the target named graph
          schema:
            type: string
        - name: default
          in: query
          description: Include instead of 'query' to operate on the default graph
          schema:
            type: string
      responses:
        '200':
          description: Graph exists and is accessible
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/explain':
    get:
      tags:
        - SPARQL
      summary: Explain SPARQL query
      operationId: explainQueryGet
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/reasoning'
      responses:
        '200':
          description: Query plan
          content:
            text/plain:
              examples:
                QUERY_PLAN_TEST:
                  description: QUERY_PLAN_TEST
                  $ref: '#/components/examples/QUERY_PLAN_TEST'
            application/json:
              schema:
                $ref: '#/components/schemas/QUERY_PLAN_JSON'
        '400':
          $ref: '#/components/responses/INVALID_QUERY'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
    post:
      tags:
        - SPARQL
      summary: Explain SPARQL query
      operationId: explainQueryPost
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      requestBody:
        content:
          application/sparql-query:
            examples:
              SPARQL_QUERY:
                description: SPARQL_QUERY
                $ref: '#/components/examples/SPARQL_QUERY'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SPARQL_QUERY'
        required: true
      responses:
        '200':
          description: Query plan
          content:
            text/plain:
              examples:
                QUERY_PLAN_TEST:
                  description: QUERY_PLAN_TEST
                  $ref: '#/components/examples/QUERY_PLAN_TEST'
            application/json:
              schema:
                $ref: '#/components/schemas/QUERY_PLAN_JSON'
        '400':
          $ref: '#/components/responses/INVALID_QUERY'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/query':
    get:
      tags:
        - SPARQL
      summary: Perform SPARQL query
      operationId: get
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/reasoning'
      responses:
        '200':
          description: Query results
          content:
            application/sparql-results+xml:
              examples:
                SPARQL_RESULTS_XML:
                  description: SPARQL_RESULTS_XML
                  $ref: '#/components/examples/SPARQL_RESULTS_XML'
            application/sparql-results+json:
              schema:
                $ref: '#/components/schemas/SPARQL_RESULTS_JSON'
            text/csv:
              examples:
                SPARQL_RESULTS_CSV:
                  description: SPARQL_RESULTS_CSV
                  $ref: '#/components/examples/SPARQL_RESULTS_CSV'
            text/tsv:
              examples:
                SPARQL_RESULTS_TSV:
                  description: SPARQL_RESULTS_TSV
                  $ref: '#/components/examples/SPARQL_RESULTS_TSV'
            text/turtle:
              examples:
                GENERIC_TURTLE:
                  description: GENERIC_TURTLE
                  $ref: '#/components/examples/GENERIC_TURTLE'
            application/trig:
              examples:
                GENERIC_TRIG:
                  description: GENERIC_TRIG
                  $ref: '#/components/examples/GENERIC_TRIG'
            application/rdf+xml:
              examples:
                GENERIC_RDFXML:
                  description: GENERIC_RDFXML
                  $ref: '#/components/examples/GENERIC_RDFXML'
            application/n-triples:
              examples:
                GENERIC_NTRIPLES:
                  description: GENERIC_NTRIPLES
                  $ref: '#/components/examples/GENERIC_NTRIPLES'
            application/n-quads:
              examples:
                GENERIC_NQUADS:
                  description: GENERIC_NQUADS
                  $ref: '#/components/examples/GENERIC_NQUADS'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/GENERIC_JSONLD'
        '400':
          $ref: '#/components/responses/INVALID_QUERY'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
        '406':
          description: Accept header invalid for type of query sent
    post:
      tags:
        - SPARQL
      summary: Perform SPARQL query
      operationId: post
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      requestBody:
        content:
          application/sparql-query:
            examples:
              SPARQL_QUERY:
                description: SPARQL_QUERY
                $ref: '#/components/examples/SPARQL_QUERY'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SPARQL_QUERY'
        required: true
      responses:
        '200':
          description: Query results
          content:
            application/sparql-results+xml:
              examples:
                SPARQL_RESULTS_XML:
                  description: SPARQL_RESULTS_XML
                  $ref: '#/components/examples/SPARQL_RESULTS_XML'
            application/sparql-results+json:
              schema:
                $ref: '#/components/schemas/SPARQL_RESULTS_JSON'
            text/csv:
              examples:
                SPARQL_RESULTS_CSV:
                  description: SPARQL_RESULTS_CSV
                  $ref: '#/components/examples/SPARQL_RESULTS_CSV'
            text/tsv:
              examples:
                SPARQL_RESULTS_TSV:
                  description: SPARQL_RESULTS_TSV
                  $ref: '#/components/examples/SPARQL_RESULTS_TSV'
            text/turtle:
              examples:
                GENERIC_TURTLE:
                  description: GENERIC_TURTLE
                  $ref: '#/components/examples/GENERIC_TURTLE'
            application/trig:
              examples:
                GENERIC_TRIG:
                  description: GENERIC_TRIG
                  $ref: '#/components/examples/GENERIC_TRIG'
            application/rdf+xml:
              examples:
                GENERIC_RDFXML:
                  description: GENERIC_RDFXML
                  $ref: '#/components/examples/GENERIC_RDFXML'
            application/n-triples:
              examples:
                GENERIC_NTRIPLES:
                  description: GENERIC_NTRIPLES
                  $ref: '#/components/examples/GENERIC_NTRIPLES'
            application/n-quads:
              examples:
                GENERIC_NQUADS:
                  description: GENERIC_NQUADS
                  $ref: '#/components/examples/GENERIC_NQUADS'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/GENERIC_JSONLD'
        '400':
          $ref: '#/components/responses/INVALID_QUERY'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
        '406':
          description: Accept header invalid for type of query sent
  '/{db}/update':
    get:
      tags:
        - SPARQL
      summary: Perform SPARQL Update query
      operationId: updateGet
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/reasoning'
      responses:
        '200':
          description: Update query succeeded
        '400':
          description: Invalid query sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE_ERROR_MESSAGE'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
    post:
      tags:
        - SPARQL
      summary: Perform SPARQL Update query
      operationId: updatePost
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      requestBody:
        content:
          application/sparql-update:
            examples:
              SPARQL_UPDATE:
                description: SPARQL_UPDATE
                $ref: '#/components/examples/SPARQL_UPDATE'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SPARQL_QUERY'
        required: true
      responses:
        '200':
          description: Update query succeeded
        '400':
          description: Invalid query sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GENERIC_RESPONSE_ERROR_MESSAGE'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  /admin/status/prometheus:
    get:
      tags:
        - Server Status/Metrics
      summary: Get Prometheus metrics
      description: Return metric information from the registry in Prometheus format
      operationId: prometheus
      responses:
        '200':
          description: Prometheus metrics
          content:
            text/plain: {}
  /admin/status:
    get:
      tags:
        - Server Status/Metrics
      summary: Get Server metrics
      description: Return metric information from the registry in JSON format
      operationId: status
      responses:
        '200':
          description: Server metrics
          content:
            application/json: {}
  '/admin/users/{user}/superuser':
    get:
      tags:
        - Users
      summary: User is Superuser
      description: Return whether or not a user is a Superuser
      operationId: isSuper
      parameters:
        - name: user
          $ref: '#/components/parameters/user'
      responses:
        '200':
          $ref: '#/components/responses/SUPERUSER'
        '404':
          description: User does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: User does not exist
                  code:
                    type: string
                    example: SERNF2
  '/admin/users/{user}/roles/{role}':
    delete:
      tags:
        - Users
      summary: Remove role from user
      operationId: removeUserRole
      parameters:
        - name: user
          $ref: '#/components/parameters/user'
        - name: role
          $ref: '#/components/parameters/role'
      responses:
        '204':
          description: Role successfully removed
        '404':
          description: User/Role does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: User does not exist
                  code:
                    type: string
                    example: SERNF2
  /admin/users:
    get:
      tags:
        - Users
      summary: List users
      operationId: listUsers
      responses:
        '200':
          $ref: '#/components/responses/USER_LIST'
    post:
      tags:
        - Users
      summary: Add user
      operationId: addUser
      requestBody:
        $ref: '#/components/requestBodies/USER_CREATE'
      responses:
        '201':
          description: User created
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
  '/admin/users/{user}/pwd':
    put:
      tags:
        - Users
      summary: Change user's password
      operationId: changePassword
      parameters:
        - name: user
          $ref: '#/components/parameters/user'
      requestBody:
        $ref: '#/components/requestBodies/USER_PASSWD'
      responses:
        '200':
          description: Password successfully changed
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
        '404':
          description: User does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: User does not exist
                  code:
                    type: string
                    example: SERNF2
  '/admin/users/{user}/roles':
    get:
      tags:
        - Users
      summary: Get user's roles
      description: Retrieve a list of all roles explicitly assigned to a user
      operationId: getUserRoles
      parameters:
        - name: user
          $ref: '#/components/parameters/user'
      responses:
        '200':
          $ref: '#/components/responses/ROLE_LIST'
        '404':
          description: User does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: User does not exist
                  code:
                    type: string
                    example: SERNF2
    put:
      tags:
        - Users
      summary: Set user's roles
      description: Overwrite the list of roles explicitly assigned to a user
      operationId: setUserRoles
      parameters:
        - name: user
          $ref: '#/components/parameters/user'
      requestBody:
        $ref: '#/components/requestBodies/ROLE_LIST'
      responses:
        '200':
          description: Roles successfully updated
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
        '404':
          description: User does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: User does not exist
                  code:
                    type: string
                    example: SERNF2
    post:
      tags:
        - Users
      summary: Add role to user
      operationId: addUserRole
      parameters:
        - name: user
          $ref: '#/components/parameters/user'
      requestBody:
        $ref: '#/components/requestBodies/ROLENAME'
      responses:
        '204':
          description: Role successfully added
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
        '404':
          description: User does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: User does not exist
                  code:
                    type: string
                    example: SERNF2
  '/admin/users/{user}':
    get:
      tags:
        - Users
      summary: Get User
      description: 'Retrieve attributes, roles, and permissions of a User'
      operationId: getUser
      parameters:
        - name: user
          $ref: '#/components/parameters/user'
      responses:
        '200':
          $ref: '#/components/responses/USER'
        '404':
          description: User does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: User does not exist
                  code:
                    type: string
                    example: SERNF2
    delete:
      tags:
        - Users
      summary: Delete User
      operationId: deleteUser
      parameters:
        - name: user
          $ref: '#/components/parameters/user'
      responses:
        '204':
          description: User deleted
        '404':
          description: User does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: User does not exist
                  code:
                    type: string
                    example: SERNF2
  '/admin/users/{user}/enabled':
    get:
      tags:
        - Users
      summary: User enabled
      description: Return whether or not a user is enabled (active) in the system
      operationId: userEnabled
      parameters:
        - name: user
          $ref: '#/components/parameters/user'
      responses:
        '200':
          $ref: '#/components/responses/ENABLED'
        '404':
          description: User does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: User does not exist
                  code:
                    type: string
                    example: SERNF2
    put:
      tags:
        - Users
      summary: Enable/Disable User
      operationId: setUserEnabled
      parameters:
        - name: user
          $ref: '#/components/parameters/user'
      requestBody:
        $ref: '#/components/requestBodies/ENABLED'
      responses:
        '200':
          description: Flag set
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
        '404':
          description: User does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: User does not exist
                  code:
                    type: string
                    example: SERNF2
  '/admin/roles//{role}/users':
    get:
      tags:
        - Roles
      summary: Get users with role
      description: Returns a list of all users that have a specific role
      operationId: getUsersWithRole
      parameters:
        - name: role
          $ref: '#/components/parameters/role'
      responses:
        '200':
          $ref: '#/components/responses/USER_LIST'
        '404':
          description: Role does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Role does not exist
                  code:
                    type: string
                    example: SERNF2
  '/admin/roles/{role}':
    delete:
      tags:
        - Roles
      summary: Delete role
      operationId: deleteRole
      parameters:
        - name: role
          $ref: '#/components/parameters/role'
        - name: force
          in: query
          description: Whether to force delete if role is assigned to users
          schema:
            type: boolean
      responses:
        '204':
          description: Role deleted
        '404':
          description: Role does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Role does not exist
                  code:
                    type: string
                    example: SERNF2
  /admin/roles:
    get:
      tags:
        - Roles
      summary: List Roles
      description: Get the names of all roles in the system
      operationId: listRoles
      responses:
        '200':
          $ref: '#/components/responses/ROLE_LIST'
    post:
      tags:
        - Roles
      summary: Add role
      operationId: addRole
      requestBody:
        $ref: '#/components/requestBodies/ROLENAME'
      responses:
        '201':
          description: Role added
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
  '/admin/permissions/user/{user}/delete':
    post:
      tags:
        - Permissions
      summary: Delete User Permission
      description: Revoke a permission from a given user
      operationId: deleteUserPermission
      parameters:
        - name: user
          $ref: '#/components/parameters/user'
      requestBody:
        $ref: '#/components/requestBodies/PERMISSION'
      responses:
        '201':
          description: Permission removed
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
        '404':
          description: User does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: User does not exist
                  code:
                    type: string
                    example: SERNF2
  '/admin/permissions/user/{user}':
    get:
      tags:
        - Permissions
      summary: Get user permissions
      description: Get all permissions assigned to a given user
      operationId: getUserPermissions
      parameters:
        - name: user
          $ref: '#/components/parameters/user'
      responses:
        '200':
          $ref: '#/components/responses/PERMISSION_LIST'
        '404':
          description: User does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: User does not exist
                  code:
                    type: string
                    example: SERNF2
    put:
      tags:
        - Permissions
      summary: Add User Permission
      description: Grant a permission directly to a specified user
      operationId: addUserPermission
      parameters:
        - name: user
          $ref: '#/components/parameters/user'
      requestBody:
        $ref: '#/components/requestBodies/PERMISSION'
      responses:
        '201':
          description: Permission added
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
        '404':
          description: User does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: User does not exist
                  code:
                    type: string
                    example: SERNF2
  '/admin/permissions/role/{role}/delete':
    post:
      tags:
        - Permissions
      summary: Delete Role Permission
      description: Remove a permission from a given role
      operationId: deleteRolePermission
      parameters:
        - name: role
          $ref: '#/components/parameters/role'
      requestBody:
        $ref: '#/components/requestBodies/PERMISSION'
      responses:
        '201':
          description: Permission removed
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
        '404':
          description: Role does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Role does not exist
                  code:
                    type: string
                    example: SERNF2
  '/admin/permissions/role/{role}':
    get:
      tags:
        - Permissions
      summary: Get role permissions
      description: Get all permissions attributed to a given role
      operationId: getRolePermissions
      parameters:
        - name: role
          $ref: '#/components/parameters/role'
      responses:
        '200':
          $ref: '#/components/responses/PERMISSION_LIST'
        '404':
          description: Role does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Role does not exist
                  code:
                    type: string
                    example: SERNF2
    put:
      tags:
        - Permissions
      summary: Add Role Permission
      description: Add a permission to a specified role
      operationId: addRolePermission
      parameters:
        - name: role
          $ref: '#/components/parameters/role'
      requestBody:
        $ref: '#/components/requestBodies/PERMISSION'
      responses:
        '201':
          description: Permission added
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
        '404':
          description: Role does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Role does not exist
                  code:
                    type: string
                    example: SERNF2
  '/admin/permissions/effective/user/{user}':
    get:
      tags:
        - Permissions
      summary: Get effective user permissions
      description: Get all permissions assigned to a given user as well as those granted by assigned roles
      operationId: getEffectiveUserPermissions
      parameters:
        - name: user
          $ref: '#/components/parameters/user'
      responses:
        '200':
          $ref: '#/components/responses/PERMISSION_LIST'
        '404':
          description: User does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: User does not exist
                  code:
                    type: string
                    example: SERNF2
  /admin/queries/stored:
    get:
      tags:
        - Queries
      summary: List stored queries
      operationId: listStoredQueries
      responses:
        '200':
          description: RDF serialization of server's stored queries
          content:
            text/turtle:
              examples:
                STORED_QUERY_TURTLE:
                  description: STORED_QUERY_TURTLE
                  $ref: '#/components/examples/STORED_QUERY_TURTLE'
            application/trig:
              examples:
                STORED_QUERY_TRIG:
                  description: STORED_QUERY_TRIG
                  $ref: '#/components/examples/STORED_QUERY_TRIG'
            application/rdf+xml:
              examples:
                STORED_QUERY_RDFXML:
                  description: STORED_QUERY_RDFXML
                  $ref: '#/components/examples/STORED_QUERY_RDFXML'
            application/n-triples:
              examples:
                STORED_QUERY_NTRIPLESQUADS:
                  description: STORED_QUERY_NTRIPLESQUADS
                  $ref: '#/components/examples/STORED_QUERY_NTRIPLESQUADS'
            application/n-quads:
              examples:
                STORED_QUERY_NTRIPLESQUADS:
                  description: STORED_QUERY_NTRIPLESQUADS
                  $ref: '#/components/examples/STORED_QUERY_NTRIPLESQUADS'
            application/ld+json: {}
    put:
      tags:
        - Queries
      summary: Update stored query
      description: 'Add stored query, overwriting if a query with that name already exists'
      operationId: updateStoredQuery
      requestBody:
        content:
          text/turtle:
            examples:
              STORED_QUERY_TURTLE:
                description: STORED_QUERY_TURTLE
                $ref: '#/components/examples/STORED_QUERY_TURTLE'
          application/trig:
            examples:
              STORED_QUERY_TRIG:
                description: STORED_QUERY_TRIG
                $ref: '#/components/examples/STORED_QUERY_TRIG'
          application/rdf+xml:
            examples:
              STORED_QUERY_RDFXML:
                description: STORED_QUERY_RDFXML
                $ref: '#/components/examples/STORED_QUERY_RDFXML'
          application/n-triples:
            examples:
              STORED_QUERY_NTRIPLESQUADS:
                description: STORED_QUERY_NTRIPLESQUADS
                $ref: '#/components/examples/STORED_QUERY_NTRIPLESQUADS'
          application/n-quads:
            examples:
              STORED_QUERY_NTRIPLESQUADS:
                description: STORED_QUERY_NTRIPLESQUADS
                $ref: '#/components/examples/STORED_QUERY_NTRIPLESQUADS'
          application/ld+json: {}
        required: true
      responses:
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
    post:
      tags:
        - Queries
      summary: Add stored query
      operationId: addStoredQuery
      requestBody:
        content:
          text/turtle:
            examples:
              STORED_QUERY_TURTLE:
                description: STORED_QUERY_TURTLE
                $ref: '#/components/examples/STORED_QUERY_TURTLE'
          application/trig:
            examples:
              STORED_QUERY_TRIG:
                description: STORED_QUERY_TRIG
                $ref: '#/components/examples/STORED_QUERY_TRIG'
          application/rdf+xml:
            examples:
              STORED_QUERY_RDFXML:
                description: STORED_QUERY_RDFXML
                $ref: '#/components/examples/STORED_QUERY_RDFXML'
          application/n-triples:
            examples:
              STORED_QUERY_NTRIPLESQUADS:
                description: STORED_QUERY_NTRIPLESQUADS
                $ref: '#/components/examples/STORED_QUERY_NTRIPLESQUADS'
          application/n-quads:
            examples:
              STORED_QUERY_NTRIPLESQUADS:
                description: STORED_QUERY_NTRIPLESQUADS
                $ref: '#/components/examples/STORED_QUERY_NTRIPLESQUADS'
          application/ld+json: {}
        required: true
      responses:
        '400':
          $ref: '#/components/responses/MALFORMED_REQUEST_400'
        '422':
          description: Stored query already exists
    delete:
      tags:
        - Queries
      summary: Delete all stored queries
      operationId: clearAllStoredQueries
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  /admin/queries:
    get:
      tags:
        - Queries
      summary: List queries
      description: Get a list of all running queries
      operationId: listQueries
      responses:
        '200':
          $ref: '#/components/responses/QUERY_LIST'
  '/admin/queries/{queryName}':
    get:
      tags:
        - Queries
      summary: Get query
      description: Get details of a specific query
      operationId: getQuery
      parameters:
        - name: queryName
          $ref: '#/components/parameters/queryName'
      responses:
        '200':
          $ref: '#/components/responses/QUERY_LIST'
        '404':
          description: Query does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Query does not exist
                  code:
                    type: string
                    example: QEQNF2
    delete:
      tags:
        - Queries
      summary: Kill query
      operationId: killQuery
      parameters:
        - name: queryName
          $ref: '#/components/parameters/queryName'
      responses:
        '204':
          description: Query killed
        '404':
          description: Query does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Query does not exist
                  code:
                    type: string
                    example: QEQNF2
  '/admin/queries/stored/{storedQueryName}':
    get:
      tags:
        - Queries
      summary: Get stored query
      operationId: getStoredQuery
      parameters:
        - name: storedQueryName
          $ref: '#/components/parameters/storedQueryName'
      responses:
        '200':
          description: RDF serialization of chosen stored query
          content:
            text/turtle:
              examples:
                STORED_QUERY_TURTLE:
                  description: STORED_QUERY_TURTLE
                  $ref: '#/components/examples/STORED_QUERY_TURTLE'
            application/trig:
              examples:
                STORED_QUERY_TRIG:
                  description: STORED_QUERY_TRIG
                  $ref: '#/components/examples/STORED_QUERY_TRIG'
            application/rdf+xml:
              examples:
                STORED_QUERY_RDFXML:
                  description: STORED_QUERY_RDFXML
                  $ref: '#/components/examples/STORED_QUERY_RDFXML'
            application/n-triples:
              examples:
                STORED_QUERY_NTRIPLESQUADS:
                  description: STORED_QUERY_NTRIPLESQUADS
                  $ref: '#/components/examples/STORED_QUERY_NTRIPLESQUADS'
            application/n-quads:
              examples:
                STORED_QUERY_NTRIPLESQUADS:
                  description: STORED_QUERY_NTRIPLESQUADS
                  $ref: '#/components/examples/STORED_QUERY_NTRIPLESQUADS'
            application/ld+json: {}
        '404':
          description: Stored query does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Stored query does not exist
                  code:
                    type: string
                    example: QEQNF2
    delete:
      tags:
        - Queries
      summary: Delete stored query
      operationId: deleteStoredQuery
      parameters:
        - name: storedQueryName
          $ref: '#/components/parameters/storedQueryName'
      responses:
        '204':
          description: Query deleted
        '404':
          description: Stored query does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Stored query does not exist
                  code:
                    type: string
                    example: QEQNF2
  /admin/functions/stored:
    get:
      tags:
        - Stored Functions
      summary: Get Stored Functions
      description: 'Retrieve all stored functions on the server, or optionally just the function specified in the query string parameter'
      operationId: exportStoredFunctions
      parameters:
        - name: functionName
          in: query
          description: The name of the stored function
          schema:
            type: string
      responses:
        '200':
          content:
            text/plain:
              examples:
                STORED_FUNCTION:
                  description: STORED_FUNCTION
                  $ref: '#/components/examples/STORED_FUNCTION'
        '400':
          description: Function does not exist
    post:
      tags:
        - Stored Functions
      summary: Add Stored Function
      operationId: addStoredFunction
      requestBody:
        content:
          text/plain:
            examples:
              STORED_FUNCTION:
                description: STORED_FUNCTION
                $ref: '#/components/examples/STORED_FUNCTION'
        required: true
      responses:
        '204':
          description: Function added
        '422':
          description: Function with the given name exists
    delete:
      tags:
        - Stored Functions
      summary: Delete Stored Functions
      description: 'Delete all stored functions on the server, or optionally just the function specified in the query string parameter'
      operationId: deleteStoredFunction
      parameters:
        - name: functionName
          in: query
          description: The name of the stored function
          schema:
            type: string
      responses:
        '204':
          description: Function deleted
        '400':
          description: Function does not exist
  '/admin/functions/stored/{functionName}':
    get:
      tags:
        - Stored Functions
      summary: Get Stored Function
      operationId: getStoredFunction
      parameters:
        - name: functionName
          $ref: '#/components/parameters/functionName'
      responses:
        '200':
          content:
            text/plain:
              examples:
                STORED_FUNCTION:
                  description: STORED_FUNCTION
                  $ref: '#/components/examples/STORED_FUNCTION'
        '400':
          description: Function does not exist
        '404':
          description: Stored function does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Stored function does not exist
                  code:
                    type: string
                    example: QEFNF2
    delete:
      tags:
        - Stored Functions
      summary: Delete Stored Function
      description: Delete the stored function specified in the query string parameter
      operationId: deleteStoredFunctionNamed
      parameters:
        - name: functionName
          $ref: '#/components/parameters/functionName'
      responses:
        '204':
          description: Function deleted
        '400':
          description: Function does not exist
        '404':
          description: Stored function does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Stored function does not exist
                  code:
                    type: string
                    example: QEFNF2
  '/{db}/docs/{docName}':
    get:
      tags:
        - BITES
      summary: Retrieve a document from the document store
      operationId: getDocument
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: docName
          $ref: '#/components/parameters/docName'
      responses:
        '200':
          description: 'The requested document, in its native format'
        '404':
          description: Database/Document does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
    delete:
      tags:
        - BITES
      summary: Delete a document from the document store
      operationId: removeDocument
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: docName
          $ref: '#/components/parameters/docName'
      responses:
        '204':
          description: Document deleted
        '404':
          description: Database/Document does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/docs':
    post:
      tags:
        - BITES
      summary: Add document(s) to document store
      operationId: modifyDocument
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      requestBody:
        description: A multipart request with any number of documents
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BITES_POST_DOC'
      responses:
        '201':
          description: Document(s) added
          headers:
            Location:
              description: Relative URL of the added document(s)
              style: simple
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
    delete:
      tags:
        - BITES
      summary: Clear document store
      operationId: clearStore
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      responses:
        '204':
          description: Document store cleared
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/docs/reindex':
    post:
      tags:
        - BITES
      summary: Reindex document store
      operationId: reindex
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      responses:
        '204':
          description: Document store reindexed
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/docs/size':
    get:
      tags:
        - BITES
      summary: Get size of document store
      operationId: getStoreSize
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      responses:
        '200':
          content:
            text/plain:
              examples:
                PLAINTEXT_INT:
                  description: PLAINTEXT_INT
                  $ref: '#/components/examples/PLAINTEXT_INT'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/graphql/{schema}':
    get:
      tags:
        - GraphQL
      summary: Perform GraphQL query with schema
      operationId: queryGetWithSchema
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: schema
          $ref: '#/components/parameters/schema'
        - name: query
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/GRAPHQL_QUERY'
        - name: schema
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/GRAPHQL_QUERY_RESULT'
        '404':
          description: Database/Schema does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
    post:
      tags:
        - GraphQL
      summary: Perform GraphQL query with schema
      operationId: queryPostWithSchema
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: schema
          $ref: '#/components/parameters/schema'
        - name: schema
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GRAPHQL_QUERY_POST'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/GRAPHQL_QUERY_RESULT'
        '404':
          description: Database/Schema does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/graphql/schemas':
    get:
      tags:
        - GraphQL
      summary: List schemas
      operationId: listSchemas
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      responses:
        '200':
          $ref: '#/components/responses/GRAPHQL_SCHEMAS'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
    delete:
      tags:
        - GraphQL
      summary: Clear schemas
      operationId: clearSchemas
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      responses:
        '204':
          description: Schemas cleared
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/graphql/schemas/{schema}':
    get:
      tags:
        - GraphQL
      summary: Get schema
      operationId: getSchema
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: schema
          $ref: '#/components/parameters/schema'
      responses:
        '200':
          $ref: '#/components/responses/GRAPHQL_SCHEMA'
        '404':
          description: Database/Schema does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
    put:
      tags:
        - GraphQL
      summary: Update schema
      operationId: updateSchema
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: schema
          $ref: '#/components/parameters/schema'
      requestBody:
        $ref: '#/components/requestBodies/GRAPHQL_SCHEMA'
      responses:
        '200':
          description: Schema updated
        '404':
          description: Database/Schema does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
    post:
      tags:
        - GraphQL
      summary: Add schema
      operationId: addSchema
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: schema
          $ref: '#/components/parameters/schema'
      requestBody:
        $ref: '#/components/requestBodies/GRAPHQL_SCHEMA'
      responses:
        '201':
          description: Schema added
        '404':
          description: Database/Schema does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
    delete:
      tags:
        - GraphQL
      summary: Remove schema
      operationId: removeSchema
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: schema
          $ref: '#/components/parameters/schema'
      responses:
        '204':
          description: Schema removed
        '404':
          description: Database/Schema does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/graphql':
    get:
      tags:
        - GraphQL
      summary: Perform GraphQL query
      operationId: queryGet
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: query
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/GRAPHQL_QUERY'
      responses:
        '200':
          $ref: '#/components/responses/GRAPHQL_QUERY_RESULT'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
    post:
      tags:
        - GraphQL
      summary: Perform GraphQL query
      operationId: queryPost
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GRAPHQL_QUERY_POST'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/GRAPHQL_QUERY_RESULT'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/icv/add':
    post:
      tags:
        - Integrity Constraints
      summary: Add constraint
      operationId: addConstraint
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      requestBody:
        description: Constraint in RDF
        content:
          text/turtle:
            examples:
              ICV_CONSTRAINT_TTL:
                description: ICV_CONSTRAINT_TTL
                $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
          application/trig:
            examples:
              ICV_CONSTRAINT_TTL:
                description: ICV_CONSTRAINT_TTL
                $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
          application/rdf+xml:
            examples:
              ICV_CONSTRAINT_RDFXML:
                description: ICV_CONSTRAINT_RDFXML
                $ref: '#/components/examples/ICV_CONSTRAINT_RDFXML'
          application/n-triples:
            examples:
              ICV_CONSTRAINT_TTL:
                description: ICV_CONSTRAINT_TTL
                $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
          application/n-quads:
            examples:
              ICV_CONSTRAINT_TTL:
                description: ICV_CONSTRAINT_TTL
                $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
          application/ld+json:
            examples:
              ICV_CONSTRAINT_JSONLD:
                description: ICV_CONSTRAINT_JSONLD
                $ref: '#/components/examples/ICV_CONSTRAINT_JSONLD'
        required: true
      responses:
        '204':
          description: Constraint added
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
      x-sort-order:
        group: '0'
  '/{db}/icv/convert':
    post:
      tags:
        - Integrity Constraints
      summary: Convert constraint
      description: Takes a constraint as RDF and converts it to a SPARQL query that can be run to determine if any data violates that constraint
      operationId: convertConstraint
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      requestBody:
        description: The constraint to be converted
        content:
          text/turtle:
            examples:
              ICV_CONSTRAINT_TTL:
                description: ICV_CONSTRAINT_TTL
                $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
          application/trig:
            examples:
              ICV_CONSTRAINT_TTL:
                description: ICV_CONSTRAINT_TTL
                $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
          application/rdf+xml:
            examples:
              ICV_CONSTRAINT_RDFXML:
                description: ICV_CONSTRAINT_RDFXML
                $ref: '#/components/examples/ICV_CONSTRAINT_RDFXML'
          application/n-triples:
            examples:
              ICV_CONSTRAINT_TTL:
                description: ICV_CONSTRAINT_TTL
                $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
          application/n-quads:
            examples:
              ICV_CONSTRAINT_TTL:
                description: ICV_CONSTRAINT_TTL
                $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
          application/ld+json:
            examples:
              ICV_CONSTRAINT_JSONLD:
                description: ICV_CONSTRAINT_JSONLD
                $ref: '#/components/examples/ICV_CONSTRAINT_JSONLD'
        required: true
      responses:
        '200':
          description: Converted SPARQL query
          content:
            text/plain:
              examples:
                ICV_SPARQL_QUERY:
                  description: ICV_SPARQL_QUERY
                  $ref: '#/components/examples/ICV_SPARQL_QUERY'
            application/json:
              schema:
                $ref: '#/components/schemas/ICV_SPARQL_QUERY'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
      x-sort-order:
        group: '0'
  '/{db}/icv/clear':
    post:
      tags:
        - Integrity Constraints
      summary: Clear constraints
      operationId: clearConstraints
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      responses:
        '204':
          description: Constraints cleared
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
      x-sort-order:
        group: '0'
  '/{db}/icv':
    get:
      tags:
        - Integrity Constraints
      summary: List constraints
      operationId: getConstraints
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      responses:
        '200':
          description: Constraints in RDF format
          content:
            text/turtle:
              examples:
                ICV_CONSTRAINT_TTL:
                  description: ICV_CONSTRAINT_TTL
                  $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
            application/trig:
              examples:
                ICV_CONSTRAINT_TTL:
                  description: ICV_CONSTRAINT_TTL
                  $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
            application/rdf+xml:
              examples:
                ICV_CONSTRAINT_RDFXML:
                  description: ICV_CONSTRAINT_RDFXML
                  $ref: '#/components/examples/ICV_CONSTRAINT_RDFXML'
            application/n-triples:
              examples:
                ICV_CONSTRAINT_TTL:
                  description: ICV_CONSTRAINT_TTL
                  $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
            application/n-quads:
              examples:
                ICV_CONSTRAINT_TTL:
                  description: ICV_CONSTRAINT_TTL
                  $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
            application/ld+json:
              examples:
                ICV_CONSTRAINT_JSONLD:
                  description: ICV_CONSTRAINT_JSONLD
                  $ref: '#/components/examples/ICV_CONSTRAINT_JSONLD'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
      x-sort-order:
        group: '0'
  '/{db}/icv/remove':
    post:
      tags:
        - Integrity Constraints
      summary: Remove constraint
      operationId: removeConstraint
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      requestBody:
        description: Constraint in RDF
        content:
          text/turtle:
            examples:
              ICV_CONSTRAINT_TTL:
                description: ICV_CONSTRAINT_TTL
                $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
          application/trig:
            examples:
              ICV_CONSTRAINT_TTL:
                description: ICV_CONSTRAINT_TTL
                $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
          application/rdf+xml:
            examples:
              ICV_CONSTRAINT_RDFXML:
                description: ICV_CONSTRAINT_RDFXML
                $ref: '#/components/examples/ICV_CONSTRAINT_RDFXML'
          application/n-triples:
            examples:
              ICV_CONSTRAINT_TTL:
                description: ICV_CONSTRAINT_TTL
                $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
          application/n-quads:
            examples:
              ICV_CONSTRAINT_TTL:
                description: ICV_CONSTRAINT_TTL
                $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
          application/ld+json:
            examples:
              ICV_CONSTRAINT_JSONLD:
                description: ICV_CONSTRAINT_JSONLD
                $ref: '#/components/examples/ICV_CONSTRAINT_JSONLD'
        required: true
      responses:
        '204':
          description: Constraint removed
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
      x-sort-order:
        group: '0'
  '/{db}/icv/validate':
    post:
      tags:
        - Integrity Constraints
      summary: Validate constraints
      description: Determine whether or not the given constraints are valid
      operationId: validate
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      requestBody:
        description: The constraint to be validated
        content:
          text/turtle:
            examples:
              ICV_CONSTRAINT_TTL:
                description: ICV_CONSTRAINT_TTL
                $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
          application/trig:
            examples:
              ICV_CONSTRAINT_TTL:
                description: ICV_CONSTRAINT_TTL
                $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
          application/rdf+xml:
            examples:
              ICV_CONSTRAINT_RDFXML:
                description: ICV_CONSTRAINT_RDFXML
                $ref: '#/components/examples/ICV_CONSTRAINT_RDFXML'
          application/n-triples:
            examples:
              ICV_CONSTRAINT_TTL:
                description: ICV_CONSTRAINT_TTL
                $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
          application/n-quads:
            examples:
              ICV_CONSTRAINT_TTL:
                description: ICV_CONSTRAINT_TTL
                $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
          application/ld+json:
            examples:
              ICV_CONSTRAINT_JSONLD:
                description: ICV_CONSTRAINT_JSONLD
                $ref: '#/components/examples/ICV_CONSTRAINT_JSONLD'
        required: true
      responses:
        '200':
          content:
            text/boolean: {}
            application/json:
              schema:
                $ref: '#/components/schemas/ICV_VALIDATION'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
      x-sort-order:
        group: '1'
        order: '1'
  '/{db}/icv/{txid}/validate':
    post:
      tags:
        - Integrity Constraints
      summary: Validate constraints in transaction
      description: Determine whether or not the given constraints are valid
      operationId: validateInTx
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: txid
          $ref: '#/components/parameters/txid'
      requestBody:
        description: The constraint to be validated
        content:
          text/turtle:
            examples:
              ICV_CONSTRAINT_TTL:
                description: ICV_CONSTRAINT_TTL
                $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
          application/trig:
            examples:
              ICV_CONSTRAINT_TTL:
                description: ICV_CONSTRAINT_TTL
                $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
          application/rdf+xml:
            examples:
              ICV_CONSTRAINT_RDFXML:
                description: ICV_CONSTRAINT_RDFXML
                $ref: '#/components/examples/ICV_CONSTRAINT_RDFXML'
          application/n-triples:
            examples:
              ICV_CONSTRAINT_TTL:
                description: ICV_CONSTRAINT_TTL
                $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
          application/n-quads:
            examples:
              ICV_CONSTRAINT_TTL:
                description: ICV_CONSTRAINT_TTL
                $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
          application/ld+json:
            examples:
              ICV_CONSTRAINT_JSONLD:
                description: ICV_CONSTRAINT_JSONLD
                $ref: '#/components/examples/ICV_CONSTRAINT_JSONLD'
        required: true
      responses:
        '200':
          content:
            text/boolean: {}
            application/json:
              schema:
                $ref: '#/components/schemas/ICV_VALIDATION'
        '404':
          description: Database/Transaction does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
      x-sort-order:
        group: '1'
        order: '2'
  '/{db}/icv/violations':
    post:
      tags:
        - Integrity Constraints
      summary: Show violations
      description: Show any violations that the database has with respect to the given constraints
      operationId: violations
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      requestBody:
        description: The constraint to be checked
        content:
          text/turtle:
            examples:
              ICV_CONSTRAINT_TTL:
                description: ICV_CONSTRAINT_TTL
                $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
          application/trig:
            examples:
              ICV_CONSTRAINT_TTL:
                description: ICV_CONSTRAINT_TTL
                $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
          application/rdf+xml:
            examples:
              ICV_CONSTRAINT_RDFXML:
                description: ICV_CONSTRAINT_RDFXML
                $ref: '#/components/examples/ICV_CONSTRAINT_RDFXML'
          application/n-triples:
            examples:
              ICV_CONSTRAINT_TTL:
                description: ICV_CONSTRAINT_TTL
                $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
          application/n-quads:
            examples:
              ICV_CONSTRAINT_TTL:
                description: ICV_CONSTRAINT_TTL
                $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
          application/ld+json:
            examples:
              ICV_CONSTRAINT_JSONLD:
                description: ICV_CONSTRAINT_JSONLD
                $ref: '#/components/examples/ICV_CONSTRAINT_JSONLD'
        required: true
      responses:
        '200':
          content:
            multipart/mixed:
              examples:
                ICV_VIOLATIONS:
                  description: ICV_VIOLATIONS
                  $ref: '#/components/examples/ICV_VIOLATIONS'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
      x-sort-order:
        group: '2'
        order: '1'
  '/{db}/icv/{txid}/violations':
    post:
      tags:
        - Integrity Constraints
      summary: Show violations in transaction
      description: Show any violations that the database has with respect to the given constraints
      operationId: violationsInTx
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: txid
          $ref: '#/components/parameters/txid'
      requestBody:
        description: The constraint to be checked
        content:
          text/turtle:
            examples:
              ICV_CONSTRAINT_TTL:
                description: ICV_CONSTRAINT_TTL
                $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
          application/trig:
            examples:
              ICV_CONSTRAINT_TTL:
                description: ICV_CONSTRAINT_TTL
                $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
          application/rdf+xml:
            examples:
              ICV_CONSTRAINT_RDFXML:
                description: ICV_CONSTRAINT_RDFXML
                $ref: '#/components/examples/ICV_CONSTRAINT_RDFXML'
          application/n-triples:
            examples:
              ICV_CONSTRAINT_TTL:
                description: ICV_CONSTRAINT_TTL
                $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
          application/n-quads:
            examples:
              ICV_CONSTRAINT_TTL:
                description: ICV_CONSTRAINT_TTL
                $ref: '#/components/examples/ICV_CONSTRAINT_TTL'
          application/ld+json:
            examples:
              ICV_CONSTRAINT_JSONLD:
                description: ICV_CONSTRAINT_JSONLD
                $ref: '#/components/examples/ICV_CONSTRAINT_JSONLD'
        required: true
      responses:
        '200':
          content:
            multipart/mixed:
              examples:
                ICV_VIOLATIONS:
                  description: ICV_VIOLATIONS
                  $ref: '#/components/examples/ICV_VIOLATIONS'
        '404':
          description: Database/Transaction does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
      x-sort-order:
        group: '2'
        order: '2'
  '/{db}/icv/report':
    post:
      tags:
        - Integrity Constraints
      summary: SHACL validation report
      description: Produces a SHACL validation report against the specified shape(s)
      externalDocs:
        url: 'https://www.w3.org/TR/shacl/#validation-report'
      operationId: validationReport
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: shapes
          in: query
          description: SHACL shapes to validate
          schema:
            type: string
        - name: nodes
          in: query
          description: SHACL focus node(s) to validate
          schema:
            type: string
        - name: countLimit
          in: query
          description: Maximum number of violations to report
          schema:
            type: string
        - name: shacl.targetClass.simple
          in: query
          schema:
            $ref: '#/components/schemas/SHACL_TARGETCLASS_SIMPLE'
      responses:
        '200':
          description: SHACL validation report
          content:
            text/turtle:
              examples:
                GENERIC_TURTLE:
                  description: GENERIC_TURTLE
                  $ref: '#/components/examples/GENERIC_TURTLE'
            application/trig:
              examples:
                GENERIC_TRIG:
                  description: GENERIC_TRIG
                  $ref: '#/components/examples/GENERIC_TRIG'
            application/rdf+xml:
              examples:
                GENERIC_RDFXML:
                  description: GENERIC_RDFXML
                  $ref: '#/components/examples/GENERIC_RDFXML'
            application/n-triples:
              examples:
                GENERIC_NTRIPLES:
                  description: GENERIC_NTRIPLES
                  $ref: '#/components/examples/GENERIC_NTRIPLES'
            application/n-quads:
              examples:
                GENERIC_NQUADS:
                  description: GENERIC_NQUADS
                  $ref: '#/components/examples/GENERIC_NQUADS'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/GENERIC_JSONLD'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
      x-sort-order:
        group: '3'
        order: '1'
  '/{db}/icv/{txid}/report':
    post:
      tags:
        - Integrity Constraints
      summary: SHACL validation report in transaction
      description: Produces a SHACL validation report against the specified shape(s)
      externalDocs:
        url: 'https://www.w3.org/TR/shacl/#validation-report'
      operationId: validationReportInTx
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: txid
          $ref: '#/components/parameters/txid'
        - name: shapes
          in: query
          description: SHACL shapes to validate
          schema:
            type: string
        - name: nodes
          in: query
          description: SHACL focus node(s) to validate
          schema:
            type: string
        - name: countLimit
          in: query
          description: Maximum number of violations to report
          schema:
            type: string
        - name: shacl.targetClass.simple
          in: query
          schema:
            $ref: '#/components/schemas/SHACL_TARGETCLASS_SIMPLE'
      responses:
        '200':
          description: SHACL validation report
          content:
            text/turtle:
              examples:
                GENERIC_TURTLE:
                  description: GENERIC_TURTLE
                  $ref: '#/components/examples/GENERIC_TURTLE'
            application/trig:
              examples:
                GENERIC_TRIG:
                  description: GENERIC_TRIG
                  $ref: '#/components/examples/GENERIC_TRIG'
            application/rdf+xml:
              examples:
                GENERIC_RDFXML:
                  description: GENERIC_RDFXML
                  $ref: '#/components/examples/GENERIC_RDFXML'
            application/n-triples:
              examples:
                GENERIC_NTRIPLES:
                  description: GENERIC_NTRIPLES
                  $ref: '#/components/examples/GENERIC_NTRIPLES'
            application/n-quads:
              examples:
                GENERIC_NQUADS:
                  description: GENERIC_NQUADS
                  $ref: '#/components/examples/GENERIC_NQUADS'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/GENERIC_JSONLD'
        '404':
          description: Database/Transaction does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
      x-sort-order:
        group: '3'
        order: '2'
  /admin/cache:
    post:
      tags:
        - Data Caching
      summary: Create cache
      description: |-
        Create a new cached dataset from a query or named/virtual graph

        NOTE: Either "query" or "graph" must be provided
      operationId: createCache
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CACHE_OBJ'
        required: true
      responses:
        '200':
          content:
            text/plain:
              example: Cached query with 42 solutions
  '/admin/cache/refresh/{name}':
    post:
      tags:
        - Data Caching
      summary: Refresh cache
      operationId: refreshCache
      parameters:
        - name: name
          in: query
          description: The name of the cache
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            text/plain:
              example: Refreshed query with 42 solutions
  /admin/cache/status:
    post:
      tags:
        - Data Caching
      summary: Get cache status
      description: Retrieve the status of one or more cached graphs or queries
      operationId: cachedDatasetStatus
      requestBody:
        $ref: '#/components/requestBodies/CACHE_LIST'
      responses:
        '200':
          $ref: '#/components/responses/CACHE_STATUS_LIST'
  /admin/cache/graphs:
    get:
      tags:
        - Data Caching
      summary: Get cached graphs
      operationId: getCachedGraphs
      responses:
        '200':
          $ref: '#/components/responses/CACHE_GRAPH_LIST'
  /admin/cache/target:
    get:
      tags:
        - Data Caching
      summary: List cache targets
      operationId: listTargets
      responses:
        '200':
          $ref: '#/components/responses/CACHE_TARGET_LIST'
    post:
      tags:
        - Data Caching
      summary: Add cache target
      operationId: addTarget
      requestBody:
        $ref: '#/components/requestBodies/CACHE_TARGET'
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  '/admin/cache/target/{name}':
    delete:
      tags:
        - Data Caching
      summary: Remove cache target
      description: Remove a cache target and destroy its contents
      operationId: removeTarget
      parameters:
        - name: name
          in: query
          description: The name of the target
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Target removed
  /admin/cache/queries:
    get:
      tags:
        - Data Caching
      summary: Get cached queries
      operationId: getCachedQueries
      responses:
        '200':
          $ref: '#/components/responses/CACHE_QUERY_LIST'
  '/admin/cache/target/{name}/orphan':
    delete:
      tags:
        - Data Caching
      summary: Orphan cache target
      description: Orphan a cache target but do not destroy the contents
      operationId: orphanTarget
      parameters:
        - name: name
          in: query
          description: The name of the target
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Target orphaned
  '/admin/cache/{name}':
    delete:
      tags:
        - Data Caching
      summary: Drop cache
      operationId: dropCache
      parameters:
        - name: name
          in: query
          description: The name of the cache
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Cache dropped
  '/{db}/reasoning/consistency':
    get:
      tags:
        - Reasoning
      summary: Check consistency
      description: Returns whether or not the data in the database are consistent with respect to the ontology
      operationId: isConsistent
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      responses:
        '200':
          content:
            text/boolean: {}
            application/json:
              schema:
                $ref: '#/components/schemas/CONSISTENT'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/reasoning/{txid}/explain/inconsistency':
    get:
      tags:
        - Reasoning
      summary: Explain inconsistency in transaction
      description: 'Explain how, if at all, the data are inconsistent with respect to the ontology'
      operationId: explainInconsistencyInTx
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: txid
          $ref: '#/components/parameters/txid'
      responses:
        '200':
          $ref: '#/components/responses/REASONING_PROOF_LIST'
        '404':
          description: Database/Transaction does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/reasoning/explain':
    post:
      tags:
        - Reasoning
      summary: Explain inference
      description: Explain how the inference engine inferred a specific piece of data
      operationId: explainInference
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      requestBody:
        description: The axiom to explain
        content:
          text/turtle:
            examples:
              REASONING_AXIOM_TTL:
                description: REASONING_AXIOM_TTL
                $ref: '#/components/examples/REASONING_AXIOM_TTL'
          application/trig:
            examples:
              REASONING_AXIOM_TTL:
                description: REASONING_AXIOM_TTL
                $ref: '#/components/examples/REASONING_AXIOM_TTL'
          application/rdf+xml:
            examples:
              REASONING_AXIOM_RDFXML:
                description: REASONING_AXIOM_RDFXML
                $ref: '#/components/examples/REASONING_AXIOM_RDFXML'
          application/n-triples:
            examples:
              REASONING_AXIOM_TTL:
                description: REASONING_AXIOM_TTL
                $ref: '#/components/examples/REASONING_AXIOM_TTL'
          application/n-quads:
            examples:
              REASONING_AXIOM_TTL:
                description: REASONING_AXIOM_TTL
                $ref: '#/components/examples/REASONING_AXIOM_TTL'
          application/ld+json:
            examples:
              REASONING_AXIOM_JSONLD:
                description: REASONING_AXIOM_JSONLD
                $ref: '#/components/examples/REASONING_AXIOM_JSONLD'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/REASONING_PROOF_LIST'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/query/reasoning':
    get:
      tags:
        - Reasoning
      summary: Perform SPARQL query with reasoning enabled
      operationId: query
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - $ref: '#/components/parameters/query'
      requestBody:
        content:
          application/sparql-query:
            examples:
              SPARQL_QUERY:
                description: SPARQL_QUERY
                $ref: '#/components/examples/SPARQL_QUERY'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SPARQL_QUERY'
      responses:
        '200':
          description: Query results
          content:
            application/sparql-results+xml:
              examples:
                SPARQL_RESULTS_XML:
                  description: SPARQL_RESULTS_XML
                  $ref: '#/components/examples/SPARQL_RESULTS_XML'
            application/sparql-results+json:
              schema:
                $ref: '#/components/schemas/SPARQL_RESULTS_JSON'
            text/csv:
              examples:
                SPARQL_RESULTS_CSV:
                  description: SPARQL_RESULTS_CSV
                  $ref: '#/components/examples/SPARQL_RESULTS_CSV'
            text/tsv:
              examples:
                SPARQL_RESULTS_TSV:
                  description: SPARQL_RESULTS_TSV
                  $ref: '#/components/examples/SPARQL_RESULTS_TSV'
            text/turtle:
              examples:
                GENERIC_TURTLE:
                  description: GENERIC_TURTLE
                  $ref: '#/components/examples/GENERIC_TURTLE'
            application/trig:
              examples:
                GENERIC_TRIG:
                  description: GENERIC_TRIG
                  $ref: '#/components/examples/GENERIC_TRIG'
            application/rdf+xml:
              examples:
                GENERIC_RDFXML:
                  description: GENERIC_RDFXML
                  $ref: '#/components/examples/GENERIC_RDFXML'
            application/n-triples:
              examples:
                GENERIC_NTRIPLES:
                  description: GENERIC_NTRIPLES
                  $ref: '#/components/examples/GENERIC_NTRIPLES'
            application/n-quads:
              examples:
                GENERIC_NQUADS:
                  description: GENERIC_NQUADS
                  $ref: '#/components/examples/GENERIC_NQUADS'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/GENERIC_JSONLD'
        '400':
          $ref: '#/components/responses/INVALID_QUERY'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
        '406':
          description: Accept header invalid for type of query sent
  '/{db}/reasoning/schema':
    get:
      tags:
        - Reasoning
      summary: Get reasoning schema
      description: Retrieve the reasoning schema in RDF of the given database
      operationId: schema
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      responses:
        '200':
          description: Reasoning schema in RDF
          content:
            text/turtle:
              examples:
                GENERIC_TURTLE:
                  description: GENERIC_TURTLE
                  $ref: '#/components/examples/GENERIC_TURTLE'
            application/trig:
              examples:
                GENERIC_TRIG:
                  description: GENERIC_TRIG
                  $ref: '#/components/examples/GENERIC_TRIG'
            application/rdf+xml:
              examples:
                GENERIC_RDFXML:
                  description: GENERIC_RDFXML
                  $ref: '#/components/examples/GENERIC_RDFXML'
            application/n-triples:
              examples:
                GENERIC_NTRIPLES:
                  description: GENERIC_NTRIPLES
                  $ref: '#/components/examples/GENERIC_NTRIPLES'
            application/n-quads:
              examples:
                GENERIC_NQUADS:
                  description: GENERIC_NQUADS
                  $ref: '#/components/examples/GENERIC_NQUADS'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/GENERIC_JSONLD'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/reasoning/{txid}/explain':
    post:
      tags:
        - Reasoning
      summary: Explain inference in transaction
      description: Explain how the inference engine inferred a specific piece of data
      operationId: explainInferenceInTx
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
        - name: txid
          $ref: '#/components/parameters/txid'
      requestBody:
        description: The axiom to explain
        content:
          text/turtle:
            examples:
              REASONING_AXIOM_TTL:
                description: REASONING_AXIOM_TTL
                $ref: '#/components/examples/REASONING_AXIOM_TTL'
          application/trig:
            examples:
              REASONING_AXIOM_TTL:
                description: REASONING_AXIOM_TTL
                $ref: '#/components/examples/REASONING_AXIOM_TTL'
          application/rdf+xml:
            examples:
              REASONING_AXIOM_RDFXML:
                description: REASONING_AXIOM_RDFXML
                $ref: '#/components/examples/REASONING_AXIOM_RDFXML'
          application/n-triples:
            examples:
              REASONING_AXIOM_TTL:
                description: REASONING_AXIOM_TTL
                $ref: '#/components/examples/REASONING_AXIOM_TTL'
          application/n-quads:
            examples:
              REASONING_AXIOM_TTL:
                description: REASONING_AXIOM_TTL
                $ref: '#/components/examples/REASONING_AXIOM_TTL'
          application/ld+json:
            examples:
              REASONING_AXIOM_JSONLD:
                description: REASONING_AXIOM_JSONLD
                $ref: '#/components/examples/REASONING_AXIOM_JSONLD'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/REASONING_PROOF_LIST'
        '404':
          description: Database/Transaction does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/{db}/reasoning/explain/inconsistency':
    get:
      tags:
        - Reasoning
      summary: Explain inconsistency
      description: 'Explain how, if at all, the data are inconsistent with respect to the ontology'
      operationId: explainInconsistency
      parameters:
        - name: db
          $ref: '#/components/parameters/db'
      responses:
        '200':
          $ref: '#/components/responses/REASONING_PROOF_LIST'
        '404':
          description: Database does not exist
          content:
            application/json:
              schema:
                required:
                  - message
                  - code
                properties:
                  message:
                    type: string
                    example: Database does not exist
                  code:
                    type: string
                    example: 0D0DU2
  '/admin/virtual_graphs/{vgName}/database':
    get:
      tags:
        - Virtual Graphs
      summary: Get database
      description: Get the database associated with a virtual graph
      operationId: getVGDatabase
      responses:
        '200':
          content:
            text/plain:
              schema:
                type: string
                description: 'The database name, or * if one was not specified'
  '/admin/virtual_graphs/{vgName}/mappingsString/{syntax}':
    get:
      tags:
        - Virtual Graphs
      summary: Get mappings
      operationId: getVGMappingsForSyntax
      parameters:
        - name: syntax
          in: path
          description: The desired RDF syntax of the mappings
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Virtual graph mappings as RDF
          content:
            text/turtle:
              examples:
                GENERIC_TURTLE:
                  description: GENERIC_TURTLE
                  $ref: '#/components/examples/GENERIC_TURTLE'
            application/trig:
              examples:
                GENERIC_TRIG:
                  description: GENERIC_TRIG
                  $ref: '#/components/examples/GENERIC_TRIG'
            application/rdf+xml:
              examples:
                GENERIC_RDFXML:
                  description: GENERIC_RDFXML
                  $ref: '#/components/examples/GENERIC_RDFXML'
            application/n-triples:
              examples:
                GENERIC_NTRIPLES:
                  description: GENERIC_NTRIPLES
                  $ref: '#/components/examples/GENERIC_NTRIPLES'
            application/n-quads:
              examples:
                GENERIC_NQUADS:
                  description: GENERIC_NQUADS
                  $ref: '#/components/examples/GENERIC_NQUADS'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/GENERIC_JSONLD'
  '/admin/virtual_graphs/{vgName}/info':
    get:
      tags:
        - Virtual Graphs
      summary: Get virtual graph info
      operationId: virtualGraphInfo
      responses:
        '200':
          $ref: '#/components/responses/SINGLE_VIRTUAL_GRAPH_INFO'
  '/admin/virtual_graphs/{vgName}':
    put:
      tags:
        - Virtual Graphs
      summary: Update virtual graph
      operationId: updateVG
      requestBody:
        $ref: '#/components/requestBodies/VIRTUAL_GRAPH_CREATE'
      responses:
        '201':
          description: Virtual graph updated
    delete:
      tags:
        - Virtual Graphs
      summary: Delete virtual graph
      operationId: deleteVG
      responses:
        '204':
          description: Virtual graph deleted
  /admin/virtual_graphs/import:
    post:
      tags:
        - Virtual Graphs
      summary: Import file
      description: Import a CSV or JSON file as a virtual graph into the knowledge graph
      operationId: importFileVG
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VIRTUAL_GRAPH_IMPORT_FILE'
      responses:
        '200':
          description: File imported successfully
  /admin/virtual_graphs/import_db:
    post:
      tags:
        - Virtual Graphs
      summary: Import virtual graph
      description: Import (materialize) a virtual graph directly into the local knowledge graph
      operationId: importDb
      requestBody:
        $ref: '#/components/requestBodies/VIRTUAL_GRAPH_IMPORT'
      responses:
        '204':
          description: Virtual graph imported
  '/admin/virtual_graphs/{vgName}/online':
    post:
      tags:
        - Virtual Graphs
      summary: Online virtual graph
      operationId: onlineVG
      responses:
        '204':
          description: Virtual graph onlined
  /admin/virtual_graphs:
    get:
      tags:
        - Virtual Graphs
      summary: List virtual graphs
      operationId: listVGs
      responses:
        '200':
          $ref: '#/components/responses/VIRTUAL_GRAPH_NAME_LIST'
    post:
      tags:
        - Virtual Graphs
      summary: Add virtual graph
      operationId: addVG
      requestBody:
        $ref: '#/components/requestBodies/VIRTUAL_GRAPH_CREATE'
      responses:
        '201':
          description: Virtual graph created
  '/admin/virtual_graphs/{vgName}/available':
    get:
      tags:
        - Virtual Graphs
      summary: Available
      description: Returns whether or not the virtual graph is available
      operationId: vgAvailable
      responses:
        '200':
          content:
            text/plain: {}
            application/json:
              schema:
                $ref: '#/components/schemas/VIRTUAL_GRAPH_AVAILABLE'
  '/admin/virtual_graphs/{vgName}/options':
    get:
      tags:
        - Virtual Graphs
      summary: Get virtual graph options
      operationId: getVGOptions
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/VIRTUAL_GRAPH_OPTIONS'
  /admin/virtual_graphs/list:
    get:
      tags:
        - Virtual Graphs
      summary: List virtual graphs' info
      operationId: virtualGraphInfos
      responses:
        '200':
          $ref: '#/components/responses/VIRTUAL_GRAPH_LIST'
  /admin/cluster/standby/registry:
    get:
      tags:
        - Cluster Admin
      summary: List standby nodes
      operationId: getStandbyNodes
      responses:
        '200':
          $ref: '#/components/responses/STANDBY_NODE_LIST'
      x-sort-order:
        group: '1'
        order: '1'
  /admin/cluster/standby/join:
    put:
      tags:
        - Cluster Admin
      summary: Join cluster
      description: Instruct a standby node to join its cluster as a full node
      operationId: standbyJoin
      responses:
        '200':
          description: Node has been instructed to join
        '400':
          description: Node is not a standby node
      x-sort-order:
        group: '1'
        order: '2'
  /admin/cluster/standby/pause:
    get:
      tags:
        - Cluster Admin
      summary: Get standby pause status
      description: Get the pause status of a standby node
      operationId: getPauseState
      responses:
        '200':
          $ref: '#/components/responses/STANDBY_PAUSED'
        '400':
          description: Node is not a standby node
      x-sort-order:
        group: '1'
        order: '4'
    put:
      tags:
        - Cluster Admin
      summary: Pause/Unpause standby node
      operationId: standbyPause
      parameters:
        - name: pause
          in: query
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: Pause/Unpause requested
        '400':
          description: Node is not a standby node
      x-sort-order:
        group: '1'
        order: '3'
  '/admin/cluster/standby/registry/{standbyid}':
    delete:
      tags:
        - Cluster Admin
      summary: Revoke standby access
      description: Instruct a standby node to leave its cluster
      operationId: standbyRevokeAccess
      parameters:
        - name: standbyid
          $ref: '#/components/parameters/standbyid'
      responses:
        '200':
          description: Node has been instructed to leave
        '400':
          description: Node is not a standby node
      x-sort-order:
        group: '1'
        order: '5'
  /admin/cluster/status:
    get:
      tags:
        - Cluster Admin
      summary: Get cluster status
      operationId: packStatus
      responses:
        '200':
          $ref: '#/components/responses/CLUSTER_STATUS'
  /admin/cluster:
    get:
      tags:
        - Cluster Admin
      summary: Get cluster info
      operationId: clusterInfo
      responses:
        '200':
          $ref: '#/components/responses/NODE_LIST'
        '404':
          $ref: '#/components/responses/CLUSTER_404'
  /admin/cluster/coordinator:
    get:
      tags:
        - Cluster Admin
      summary: Coordinator check
      description: Determine if a specific cluster node is the cluster coordinator
      operationId: isCoordinator
      responses:
        '200':
          description: Node is coordinator
        '503':
          description: Node is not coordinator
  /admin/shutdownAll:
    post:
      tags:
        - Cluster Admin
      summary: Shutdown all nodes
      operationId: shutdownAll
      responses:
        '200':
          description: Shutdown request received
        '405':
          description: Remote shutdown not supported
components:
  schemas:
    GENERIC_RESPONSE_MESSAGE:
      required:
        - message
      properties:
        message:
          type: string
          example: Successfully executed request
    GENERIC_RESPONSE_ERROR_MESSAGE:
      required:
        - message
      properties:
        message:
          type: string
          example: 'Unexpected end of file [L9]'
        code:
          type: string
          example: QEIVR2
    GENERIC_JSONLD:
      properties:
        '@id':
          type: string
          example: 'urn:example:Entity1'
        '@type':
          type: string
          example: 'urn:example:Entity'
        'urn:example:hasProp':
          required:
            - '@id'
          type: array
          items:
            required:
              - '@value'
            properties:
              '@type':
                type: string
                example: 'http://www.w3.org/2001/XMLSchema#integer'
              '@value':
                type: string
                example: '42'
    GENERIC_JSONLD_OBF:
      properties:
        '@id':
          type: string
          example: 'tag:stardog:api:obf:b55b5d6354699b339940e8be603eb75c220e3110eb1d4143ffd6d3abd5679154'
        '@type':
          type: string
          example: 'tag:stardog:api:obf:9f8e6dca5e5e240793e4ebf3c3a8b23f3654018b38457dbb58a6ba802a120a42'
        'tag:stardog:api:obf:223ca9493ab57efa04fdc9b245cb86c22d00c88cf6de8f99135f78d06fd10fab':
          type: array
          items:
            properties:
              '@type':
                type: string
                example: 'tag:stardog:api:obf:d00c88d06fd10fa223ca9493ab57efa04fdc9b245cb86c22b8cf6de8f99135f7'
              '@value':
                type: string
                example: c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2
    JSON_NAMESPACES:
      required:
        - namespaces
      properties:
        namespaces:
          type: array
          items:
            required:
              - prefix
              - name
            properties:
              prefix:
                type: string
                example: rdfs
              name:
                type: string
                example: 'http://www.w3.org/2000/01/rdf-schema#'
    JSON_CONFIG_PROPERTIES:
      minProperties: 1
      additionalProperties:
        properties:
          name:
            type: string
            example: reasoning.sameas
          type:
            type: string
            example: Enum
          mutable:
            type: boolean
          mutableWhileOnline:
            type: boolean
            description: Can be changed while the database is online
          category:
            type: string
            example: Reasoning
          label:
            type: string
            example: SameAs
          description:
            type: string
            example: 'Option to enable owl:sameAs reasoning. When this option is set to ON reflexive, symmetric, and transitive closure of the owl:sameAs triples in the database is computed. When it is set to FULL, owl:sameAs inferences are computed based on the schema axioms such as functional properties'
          possibleValues:
            type: array
            example:
              - 'OFF'
              - 'ON'
              - FULL
            items:
              type: string
          defaultValue:
            type: string
            example: 'OFF'
    DB_OFFLINE_ONLINE:
      required:
        - timeout
      properties:
        timeout:
          type: integer
          description: timeout in ms
          format: int32
    DB_CREATE:
      required:
        - root
      properties:
        root:
          required:
            - dbname
            - options
            - files
          properties:
            dbname:
              type: string
              example: myDb
            options:
              type: object
            files:
              type: array
              items:
                required:
                  - filename
                properties:
                  filename:
                    type: string
                    example: fileX.ttl
                  context:
                    type: string
                    example: 'urn:my:graph'
          example: '{"dbname": "myDb", "options": {}, "files": [ {"filename": "file1.ttl"} ] }'
      additionalProperties:
        type: string
        format: binary
    COMMIT_RESULT:
      required:
        - added
        - removed
      properties:
        added:
          type: integer
          description: Approximate number of triples added
          format: int32
          example: 42
        removed:
          type: integer
          description: Approximate number of triples removed
          format: int32
          example: 29
    TRANSACTION:
      required:
        - id
        - db
        - user
        - startTime
      properties:
        id:
          type: string
          format: uuid
          example: 4ea1ebac-48f0-459c-a9a7-6cad7189403d
        db:
          type: string
          example: myDb
        user:
          type: string
          example: admin
        startTime:
          type: long
          description: Unix timestamp when transaction started
          example: 1579812754096
    SPARQL_QUERY:
      required:
        - query
      properties:
        query:
          type: string
          example: |-
            PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
            PREFIX : <http://example.org/stardog#>
             
            SELECT ?s ?label WHERE {
                ?s a :Example ;
                   rdfs:label ?label
            }
        reasoning:
          type: boolean
          description: Enable Reasoning
    SPARQL_RESULTS_JSON:
      required:
        - head
        - results
      properties:
        head:
          required:
            - vars
          properties:
            vars:
              type: array
              items:
                type: string
        results:
          required:
            - bindings
          properties:
            bindings:
              type: array
              items:
                additionalProperties:
                  required:
                    - type
                    - value
                  properties:
                    type:
                      type: string
                      example: literal
                    value:
                      type: string
                      example: '42'
    QUERY_PLAN_JSON:
      required:
        - prefixes
        - dataset
        - plan
      properties:
        prefixes:
          additionalProperties:
            type: string
        dataset:
          type: object
        plan:
          $ref: '#/components/schemas/PLAN_NODE'
    PLAN_NODE:
      properties:
        label:
          type: string
          example: MergeJoin(?s)
        cardinality:
          type: integer
          format: int32
          example: 42
        children:
          type: array
          items:
            $ref: '#/components/schemas/PLAN_NODE'
    USER_LIST:
      required:
        - users
      properties:
        users:
          type: array
          items:
            type: string
    USER_CREATE:
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    USER_PASSWD:
      required:
        - password
      properties:
        password:
          type: string
    ROLE_LIST:
      required:
        - roles
      properties:
        roles:
          type: array
          items:
            type: string
    ROLENAME:
      required:
        - rolename
      properties:
        rolename:
          type: string
    ENABLED:
      required:
        - enabled
      properties:
        enabled:
          type: boolean
    SUPERUSER:
      required:
        - superuser
      properties:
        superuser:
          type: boolean
    USER:
      required:
        - enabled
        - superuser
        - roles
        - permissions
      properties:
        enabled:
          type: boolean
        superuser:
          type: boolean
        roles:
          type: array
          items:
            type: string
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/PERMISSION_WITH_EXPLICIT'
    PERMISSION:
      required:
        - action
        - resource_type
        - resource
      properties:
        action:
          type: string
          enum:
            - read
            - write
            - create
            - delete
            - revoke
            - grant
            - execute
            - all
        resource_type:
          type: string
          enum:
            - ALL
            - USER
            - ROLE
            - ROLE_ASSIGNMENT
            - PERMISSION
            - DATABASE
            - NAMED_GRAPH
            - VIRTUAL_GRAPH
            - DBMS_ADMIN
            - DATABASE_METADATA
            - DATABASE_ADMIN
            - SENSITIVE_PROPERTIES
        resource:
          type: array
          items:
            type: string
    PERMISSION_WITH_EXPLICIT:
      required:
        - action
        - resource_type
        - resource
      properties:
        action:
          type: string
          enum:
            - read
            - write
            - create
            - delete
            - revoke
            - grant
            - execute
            - all
        resource_type:
          type: string
          enum:
            - ALL
            - USER
            - ROLE
            - ROLE_ASSIGNMENT
            - PERMISSION
            - DATABASE
            - NAMED_GRAPH
            - VIRTUAL_GRAPH
            - DBMS_ADMIN
            - DATABASE_METADATA
            - DATABASE_ADMIN
            - SENSITIVE_PROPERTIES
        resource:
          type: array
          items:
            type: string
        explicit:
          type: boolean
          description: Whether this permission is explicitly granted to the user versus granted via a role
    PERMISSION_LIST:
      required:
        - permissions
      properties:
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/PERMISSION'
    QUERY_LIST:
      required:
        - queries
      properties:
        queries:
          type: array
          items:
            $ref: '#/components/schemas/QUERY'
    QUERY:
      required:
        - query
        - db
        - endTime
        - startTime
        - id
        - kernelId
        - timeout
        - user
        - reasoning
        - status
      properties:
        query:
          type: string
          example: 'SELECT * WHERE {?s ?p ?o}'
        db:
          type: string
          description: The database on which the query is running
        endTime:
          type: long
          description: 'The UNIX timestamp at which the query ended, or -1 if it is still running'
        startTime:
          type: long
          description: The UNIX timestamp when the query started running
        id:
          type: string
        kernelId:
          type: string
        timeout:
          type: long
          description: 'The amount of time (in ms) after which the query will time out, or -1 if it will not time out'
        user:
          type: string
          description: The user that initiated the query
        reasoning:
          type: boolean
          description: Whether reasoning/inference is enabled on the query
        reasoningSchema:
          type: string
        status:
          type: string
          enum:
            - Not started
            - Pre-execution
            - Running
            - Terminating
            - Terminating
            - Done
    BITES_POST_DOC:
      properties:
        rdfExtractors:
          type: string
          example: 'tika,entities'
        testExtractors:
          type: string
          example: tika
        keyAssertions:
          type: boolean
          description: Whether named graph contents should be retained for the document if it already exists
      additionalProperties:
        type: string
        format: binary
    GRAPHQL_QUERY:
      type: string
      example: '{ Human { name } }'
    GRAPHQL_QUERY_POST:
      required:
        - query
      properties:
        query:
          $ref: '#/components/schemas/GRAPHQL_QUERY'
        operationName:
          type: string
        variables:
          type: object
    GRAPHQL_QUERY_RESULT:
      required:
        - data
      properties:
        data:
          type: array
          items:
            type: object
            additionalProperties:
              type: string
    GRAPHQL_SCHEMAS:
      required:
        - schemas
      properties:
        schemas:
          type: array
          items:
            type: string
    ICV_SPARQL_QUERY:
      required:
        - query
      properties:
        query:
          type: string
          example: |-
            class Example {
                summary: null
                description: null
                value: null
                externalValue: null
                $ref: #/components/examples/ICV_SPARQL_QUERY
            }
    ICV_VALIDATION:
      required:
        - valid
      properties:
        valid:
          type: boolean
    SHACL_TARGETCLASS_SIMPLE:
      type: boolean
      description: 'If true, sh:targetClass will be evaluated based on rdf:type triples only, without following rdfs:subClassOf relations'
    CACHE_TARGET:
      required:
        - name
        - hostname
        - port
        - username
        - password
      properties:
        name:
          type: string
        hostname:
          type: string
        port:
          type: integer
          format: int32
        username:
          type: string
        password:
          type: string
    CACHE_TARGET_LIST:
      type: array
      items:
        $ref: '#/components/schemas/CACHE_TARGET'
    CACHE_OBJ:
      required:
        - name
        - target
      properties:
        name:
          type: string
          format: URI
        target:
          type: string
        database:
          type: string
        refreshScript:
          type: string
          description: An optional SPARQL Insert query to run when refreshing the cache
        query:
          type: string
          description: Query to cache. Mutually exclusive with "graph"
        graph:
          type: string
          description: Graph to cache. Mutually exclusive with "query"
    CACHE_QUERY_LIST:
      type: array
      items:
        properties:
          name:
            type: string
            format: URI
          target:
            $ref: '#/components/schemas/CACHE_TARGET'
          database:
            type: string
          refreshScript:
            type: string
            description: An optional SPARQL Insert query to run when refreshing the cache
          query:
            type: string
    CACHE_GRAPH_LIST:
      type: array
      items:
        properties:
          name:
            type: string
            format: URI
          target:
            $ref: '#/components/schemas/CACHE_TARGET'
          database:
            type: string
          refreshScript:
            type: string
            description: An optional SPARQL Insert query to run when refreshing the cache
          graph:
            type: string
    CACHE_STATUS_LIST:
      type: array
      items:
        properties:
          name:
            type: string
            format: URI
          type:
            type: string
            enum:
              - graph
              - query
          target:
            type: string
          size:
            type: integer
            format: int32
            example: 42
          lastRefresh:
            type: string
            format: date
    REASONING_PROOF:
      properties:
        status:
          type: string
          enum:
            - INFERRED
            - ASSERTED
            - VIOLATED
        expression:
          type: string
        children:
          type: array
          items:
            $ref: '#/components/schemas/REASONING_PROOF'
        namedGraphs:
          type: array
          items:
            type: string
    REASONING_PROOF_LIST:
      required:
        - proofs
      properties:
        proofs:
          type: array
          items:
            $ref: '#/components/schemas/REASONING_PROOF'
    CONSISTENT:
      required:
        - consistent
      properties:
        consistent:
          type: boolean
    VIRTUAL_GRAPH:
      required:
        - name
        - available
      properties:
        name:
          type: string
        database:
          type: string
        available:
          type: boolean
    VIRTUAL_GRAPH_NAME_LIST:
      required:
        - virtual_graphs
      properties:
        virtual_graphs:
          type: array
          items:
            type: string
            example: 'virtual://myVG'
    VIRTUAL_GRAPH_LIST:
      required:
        - virtual_graphs
      properties:
        virtual_graphs:
          type: array
          items:
            $ref: '#/components/schemas/VIRTUAL_GRAPH'
    SINGLE_VIRTUAL_GRAPH_INFO:
      required:
        - info
      properties:
        info:
          $ref: '#/components/schemas/VIRTUAL_GRAPH'
    VIRTUAL_GRAPH_OPTIONS:
      properties:
        base:
          type: string
          description: Base IRI used to resolve relative IRIs from virtual graphs
          format: URI
        jdbc.url:
          type: string
          description: The URL of the JDBC connection
        jdbc.username:
          type: string
          description: The username used to make the JDBC connection
        jdbc.password:
          type: string
          description: The password used to make the JDBC connection
        jdbc.driver:
          type: string
          description: The driver class name used to make the JDBC connection
        mappings.syntax:
          type: string
          enum:
            - R2RML
            - STARDOG
            - SMS2
        mappings.format:
          type: string
          description: 'For R2RML, the RDF format of the mappings'
        csv.separator:
          type: string
          description: 'For CSV import, a single-character separator'
          default: ','
        csv.quote:
          type: string
          description: 'For CSV import, a single character used to encapsulate values containing special characters'
          default: '"'
        csv.header:
          type: boolean
          description: 'For CSV import, should the import process read the header row?'
          default: true
        csv.skip.empty:
          type: boolean
          description: 'For CSV import, should empty values be skipped?'
          default: true
        csv.class:
          type: string
          description: 'For CSV import, which class should imported rows be members of?'
        csv.hash.function:
          type: string
          description: 'For CSV import, which hash function should be uses when the # notation is used?'
          default: SHA1
        mongodb.uri:
          type: string
          description: The URI for a MongoDB connection
        elasticsearch.rest.urls:
          type: string
          description: Whitespace-delimited list of connection host/port values for Elasticsearch
        elasticsearch.username:
          type: string
        elasticsearch.password:
          type: string
        cassandra.contact.point:
          type: string
          description: The address of the Cassandra node(s) that the driver uses to discover the cluster topology
        cassandra.keyspace:
          type: string
        cassandra.username:
          type: string
        cassandra.password:
          type: string
        cassandra.allow.filtering:
          type: boolean
          description: Whether to include the ALLOW FILTERING clause at the end of Cassandra CQL queries. Not recommended for production use
          default: false
        percent.encode:
          type: boolean
          description: Should IRI template strings be percent-encoded to be valid IRIs?
          default: true
        import.optimize:
          type: boolean
          description: Should `virtual import` and `?s ?p ?o` queries use the optimized translation?
          default: true
        parser.sql.quoting:
          type: string
          description: DB quoting convention used by the parser
          example: ANSI
        sql.functions:
          type: string
          description: A comma-separated list of SQL function names to register with the parser
        unique.key.sets:
          type: string
          description: 'For data sources that do not express unique constraints in their metadata, either because unique constraints are not supported or because the data source did not include some or all of the valid constraints for reasons such as performance concerns, this property is used to define additional constraints manually. The property value is a comma-separated list of keys that define unique rows in a table. Each key is itself a comma-separated list of schema-qualified columns, enclosed in parentheses. For example, if table `APP.CUSTOMERS` has an `ID` column that serves as a primary key and a pair of columns, `FNAME` and `LNAME`, that together are a unique key, the value to express that is: `(APP.CUSTOMERS.ID),(APP.CUSTOMERS.FNAME,APP.CUSTOMERS.LNAME)`'
        sql.dialect:
          type: string
          description: 'The format of the generated SQL, for use when using an unsupported JDBC driver'
          example: MYSQL
        sql.schemas:
          type: string
          description: A comma-separated list of schemas to append to the schema search path
        sql.default.schema:
          type: string
          description: Override the default schema for the connected user
        default.mapping.include.tables:
          type: string
          description: A comma-separated list of tables to include when generating default mappings. Incompatible with 'default.mapping.exclude.tables'
        default.mapping.exclude.tables:
          type: string
          description: A comma-separated list of tables to exclude when generating default mappings. Incompatible with 'default.mapping.include.tables'
        schema.in.generated.mappings:
          type: boolean
          description: Whether to include the name of the schema (along with the table name) in the tamplates for IRIs when automatically generating mappings
      additionalProperties:
        pattern: ext\..+
        type: string
        description: Additional properties to pass directly to the JDBC driver
      externalDocs:
        url: 'https://www.stardog.com/docs/#_available_properties'
    VIRTUAL_GRAPH_CREATE:
      properties:
        name:
          type: string
        mappings:
          type: string
        options:
          $ref: '#/components/schemas/VIRTUAL_GRAPH_OPTIONS'
    VIRTUAL_GRAPH_IMPORT:
      required:
        - db
        - mappings
        - named_graph
        - remove_all
        - options
      properties:
        db:
          type: string
          description: The database into which to import the graph
        mappings:
          type: string
        named_graph:
          type: string
        remove_all:
          type: boolean
          description: Should the target named graph be cleared before importing?
        options:
          $ref: '#/components/schemas/VIRTUAL_GRAPH_OPTIONS'
    VIRTUAL_GRAPH_AVAILABLE:
      required:
        - available
      properties:
        available:
          type: boolean
    VIRTUAL_GRAPH_IMPORT_FILE:
      required:
        - database
        - mappings
        - options
        - input_file_type
        - input_file
      properties:
        database:
          type: string
        mappings:
          type: string
        options:
          $ref: '#/components/schemas/VIRTUAL_GRAPH_OPTIONS'
        named_graph:
          type: string
          format: URI
        input_file_type:
          type: string
          enum:
            - JSON
            - DELIMITED
        input_file:
          type: string
    NODE_LIST:
      required:
        - nodes
      properties:
        nodes:
          type: array
          items:
            pattern: '^(?:[0-9]{1,3}\.){3}[0-9]{1,3}(:[0-9]{3,5})?$'
            type: string
            example: '165.7.29.42:5820'
    CLUSTER_STATUS:
      properties:
        nodes:
          required:
            - nodes
          type: array
          items:
            required:
              - address
              - metadata
              - type
            properties:
              address:
                pattern: '^(?:[0-9]{1,3}\.){3}[0-9]{1,3}(:[0-9]{3,5})?$'
                type: string
                example: '165.7.29.42:5820'
              metadata:
                type: object
              type:
                type: string
                enum:
                  - FULL
                  - STANDBY
    STANDBY_NODE_LIST:
      required:
        - standbynodes
      properties:
        standbynodes:
          type: array
          items:
            pattern: '^(?:[0-9]{1,3}\.){3}[0-9]{1,3}(:[0-9]{3,5})?$'
            type: string
            example: '165.7.29.42:5820'
    STANDBY_PAUSED:
      required:
        - STATE
      properties:
        STATE:
          type: string
          enum:
            - WAITING
            - SYNCING
            - PAUSING
            - PAUSED
  responses:
    EMPTY_SUCCESS:
      description: Operation successful
    GENERIC_RESPONSE_MESSAGE:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GENERIC_RESPONSE_MESSAGE'
    GENERIC_RESPONSE_ERROR_MESSAGE:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GENERIC_RESPONSE_ERROR_MESSAGE'
    INVALID_QUERY:
      description: Invalid query sent
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GENERIC_RESPONSE_ERROR_MESSAGE'
    JSON_CONFIG_PROPERTIES:
      description: JSON object detailing all metadata options
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JSON_CONFIG_PROPERTIES'
    ROLE_LIST:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ROLE_LIST'
    USER_LIST:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/USER_LIST'
    USER:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/USER'
    ENABLED:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ENABLED'
    SUPERUSER:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SUPERUSER'
    MALFORMED_REQUEST_400:
      description: Malformed request body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GENERIC_RESPONSE_ERROR_MESSAGE'
    PERMISSION_LIST:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PERMISSION_LIST'
    QUERY_LIST:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/QUERY_LIST'
    QUERY:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/QUERY'
    GRAPHQL_QUERY_RESULT:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GRAPHQL_QUERY_RESULT'
    GRAPHQL_SCHEMAS:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GRAPHQL_SCHEMAS'
    GRAPHQL_SCHEMA:
      content:
        application/graphql:
          example:
            $ref: '#/components/examples/GRAPHQL_SCHEMA'
    CACHE_TARGET_LIST:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CACHE_TARGET_LIST'
    CACHE_QUERY_LIST:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CACHE_QUERY_LIST'
    CACHE_GRAPH_LIST:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CACHE_GRAPH_LIST'
    CACHE_STATUS_LIST:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CACHE_STATUS_LIST'
    REASONING_PROOF_LIST:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/REASONING_PROOF_LIST'
    VIRTUAL_GRAPH_NAME_LIST:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VIRTUAL_GRAPH_NAME_LIST'
    VIRTUAL_GRAPH_LIST:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VIRTUAL_GRAPH_LIST'
    SINGLE_VIRTUAL_GRAPH_INFO:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SINGLE_VIRTUAL_GRAPH_INFO'
    VIRTUAL_GRAPH_OPTIONS:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VIRTUAL_GRAPH_OPTIONS'
    CLUSTER_404:
      description: Not part of a cluster
    NODE_LIST:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NODE_LIST'
    CLUSTER_STATUS:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CLUSTER_STATUS'
    STANDBY_NODE_LIST:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/STANDBY_NODE_LIST'
    STANDBY_PAUSED:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/STANDBY_PAUSED'
  parameters:
    db:
      name: db
      in: path
      description: Database name
      required: true
      schema:
        type: string
      example: myDb
    txid:
      name: txid
      in: path
      description: Transaction ID
      required: true
      schema:
        type: string
        format: uuid
        example: 4ea1ebac-48f0-459c-a9a7-6cad7189403d
    graph-uri:
      name: graph-uri
      in: query
      description: Named Graph / Context
      required: false
      schema:
        type: string
        format: URI
      example: 'https://stardog.com/graphs/myGraph'
    reasoning:
      name: reasoning
      in: query
      description: Enable Reasoning
      schema:
        type: boolean
    query:
      name: query
      in: query
      description: Query to run
      required: true
      schema:
        type: string
    user:
      name: user
      in: path
      description: Username
      required: true
      schema:
        type: string
    role:
      name: role
      in: path
      description: Role name
      required: true
      schema:
        type: string
    functionName:
      name: functionName
      in: path
      description: The name of the stored function
      required: true
      schema:
        type: string
    queryName:
      name: queryName
      in: path
      description: The name of the query
      required: true
      schema:
        type: string
    storedQueryName:
      name: storedQueryName
      in: path
      description: The name of the stored query
      required: true
      schema:
        type: string
    docName:
      name: docName
      in: path
      description: The name of the document
      required: true
      schema:
        type: string
    standbyid:
      name: standbyid
      in: path
      description: The UUID of the standby node
      required: true
      schema:
        type: string
        format: uuid
        example: 4ea1ebac-48f0-459c-a9a7-6cad7189403d
    schema:
      name: schema
      in: path
      description: The name of the schema
      required: true
      schema:
        type: string
  examples:
    GENERIC_TURTLE:
      value: "@prefix : <urn:example:> .\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\n@prefix stardog: <tag:stardog:api:> .\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n\n<urn:example:Entity1> a <urn:example:Entity> ;\n\t<urn:example:hasProp> 42 ."
    GENERIC_TURTLE_OBF:
      value: |-
        @prefix : <http://api.stardog.com/> .
        @prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
        @prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
        @prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
        @prefix owl: <http://www.w3.org/2002/07/owl#> .
        @prefix stardog: <tag:stardog:api:> .

        <tag:stardog:api:obf:b55b5d6354699b339940e8be603eb75c220e3110eb1d4143ffd6d3abd5679154> a <tag:stardog:api:obf:9f8e6dca5e5e240793e4ebf3c3a8b23f3654018b38457dbb58a6ba802a120a42> ;
           <tag:stardog:api:obf:d00c88d06fd10fa223ca9493ab57efa04fdc9b245cb86c22b8cf6de8f99135f7> "c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2" .
    GENERIC_TRIG:
      value: "@prefix : <urn:example:> .\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\n@prefix stardog: <tag:stardog:api:> .\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n\n{ \t<urn:example:Entity1> a <urn:example:Entity> ;\n\t\t <urn:example:hasProp> 42 .\n}"
    GENERIC_TRIG_OBF:
      value: |-
        @prefix : <http://api.stardog.com/> .
        @prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
        @prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
        @prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
        @prefix owl: <http://www.w3.org/2002/07/owl#> .
        @prefix stardog: <tag:stardog:api:> .

        {
            <tag:stardog:api:obf:b55b5d6354699b339940e8be603eb75c220e3110eb1d4143ffd6d3abd5679154> a <tag:stardog:api:obf:9f8e6dca5e5e240793e4ebf3c3a8b23f3654018b38457dbb58a6ba802a120a42> ;
              <tag:stardog:api:obf:d00c88d06fd10fa223ca9493ab57efa04fdc9b245cb86c22b8cf6de8f99135f7> "c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2" .
        }
    GENERIC_NTRIPLES:
      value: |-
        <urn:example:Entity1> a <urn:example:Entity> .
        <urn:example:Entity1> <urn:example:hasProp> 42 .
    GENERIC_NTRIPLES_OBF:
      value: |-
        <tag:stardog:api:obf:b55b5d6354699b339940e8be603eb75c220e3110eb1d4143ffd6d3abd5679154> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <tag:stardog:api:obf:9f8e6dca5e5e240793e4ebf3c3a8b23f3654018b38457dbb58a6ba802a120a42> .
        <tag:stardog:api:obf:b55b5d6354699b339940e8be603eb75c220e3110eb1d4143ffd6d3abd5679154> <tag:stardog:api:obf:d00c88d06fd10fa223ca9493ab57efa04fdc9b245cb86c22b8cf6de8f99135f7> "c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2" .
    GENERIC_NQUADS:
      value: |-
        <urn:context> <urn:example:Entity1> a <urn:example:Entity> .
        <urn:context> <urn:example:Entity1> <urn:example:hasProp> 42 .
    GENERIC_NQUADS_OBF:
      value: |-
        <tag:stardog:api:obf:e603eb75c220e3110eb1d4143ffd6d3abd5679154b55b5d6354699b339940e8b> <tag:stardog:api:obf:b55b5d6354699b339940e8be603eb75c220e3110eb1d4143ffd6d3abd5679154> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <tag:stardog:api:obf:9f8e6dca5e5e240793e4ebf3c3a8b23f3654018b38457dbb58a6ba802a120a42> .
        <tag:stardog:api:obf:e603eb75c220e3110eb1d4143ffd6d3abd5679154b55b5d6354699b339940e8b> <tag:stardog:api:obf:b55b5d6354699b339940e8be603eb75c220e3110eb1d4143ffd6d3abd5679154> <tag:stardog:api:obf:d00c88d06fd10fa223ca9493ab57efa04fdc9b245cb86c22b8cf6de8f99135f7> "c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2" .
    GENERIC_RDFXML:
      value: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rdf:RDF\n\txmlns=\"http://api.stardog.com/\"\n\txmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n\txmlns:owl=\"http://www.w3.org/2002/07/owl#\"\n\txmlns:rdfs=\"http://www.w3.org/2000/01/rdf-schema#\"\n\txmlns:stardog=\"tag:stardog:api:\"\n\txmlns:xsd=\"http://www.w3.org/2001/XMLSchema#\">\n\n<rdf:Description rdf:about=\"urn:example:Entity1\">\n\t<rdf:type rdf:resource=\"urn:example:Entity\"/>\n\t<hasProp xmlns=\"urn:example:\" rdf:datatype=\"http://www.w3.org/2001/XMLSchema#integer\">42</hasProp>\n</rdf:Description>\n\n</rdf:RDF>"
    GENERIC_RDFXML_OBF:
      value: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rdf:RDF\n\txmlns=\"http://api.stardog.com/\"\n\txmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n\txmlns:owl=\"http://www.w3.org/2002/07/owl#\"\n\txmlns:rdfs=\"http://www.w3.org/2000/01/rdf-schema#\"\n\txmlns:stardog=\"tag:stardog:api:\"\n\txmlns:xsd=\"http://www.w3.org/2001/XMLSchema#\">\n\n<rdf:Description rdf:about=\"tag:stardog:api:obf:b55b5d6354699b339940e8be603eb75c220e3110eb1d4143ffd6d3abd5679154\">\n\t<rdf:type rdf:resource=\"tag:stardog:api:obf:9f8e6dca5e5e240793e4ebf3c3a8b23f3654018b38457dbb58a6ba802a120a42\"/>\n\t<d00c88d06fd10fa223ca9493ab57efa04fdc9b245cb86c22b8cf6de8f99135f7 xmlns=\"tag:stardog:api:obf:\" rdf:datatype=\"http://www.w3.org/2001/XMLSchema#string\">c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2</d00c88d06fd10fa223ca9493ab57efa04fdc9b245cb86c22b8cf6de8f99135f7>\n</rdf:Description>\n\n</rdf:RDF>"
    SPARQL_QUERY:
      value: |-
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        PREFIX : <http://example.org/stardog#>
         
        SELECT ?s ?label WHERE {
            ?s a :Example ;
               rdfs:label ?label
        }
    SPARQL_UPDATE:
      value: |-
        PREFIX : <http://example.org/stardog#>

        DELETE {
           ?s a :OldType
        }
        INSERT {
           ?s a :NewType
        }
        WHERE {
           ?s a :OldType
        }
    SPARQL_RESULTS_XML:
      value: |-
        <?xml version='1.0' encoding='UTF-8'?>
        <sparql xmlns='http://www.w3.org/2005/sparql-results#'>
            <head>
                <variable name='s'/>
                <variable name='label'/>
            </head>
            <results>
                <result>
                    <binding name='s'>
                        <uri>http://example.org/stardog#Example1</uri>
                    </binding>
                    <binding name='label'>
                        <literal>42</literal>
                    </binding>
                </result>
                <result>
                    <binding name='s'>
                        <uri>http://example.org/stardog#Example2</uri>
                    </binding>
                    <binding name='label'>
                        <literal>foo</literal>
                    </binding>
                </result>
            </results>
        </sparql>
    SPARQL_RESULTS_CSV:
      value: |-
        s,label
        http://example.org/stardog#Example1,42
        http://example.org/stardog#Example2,foo
    SPARQL_RESULTS_TSV:
      value: "?s\t?label\n<http://example.org/stardog#Example1>\t\"42\"\n<http://example.org/stardog#Example2>\t\"foo\""
    QUERY_PLAN_TEST:
      value: |-
        prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        prefix : <http://example.org/stardog#>

        Projection(?s, ?label) [#625]
        `─ MergeJoin(?s) [#625]
           +─ Scan[POSC](?s, <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>, :Example) [#1]
           `─ Scan[PSOC](?s, rdfs:label, ?label) [#718K]
    STORED_QUERY_TURTLE:
      value: |-
        @prefix system: <http://system.stardog.com/> .

        system:QuerymyQuery a system:StoredQuery ;
           system:queryName "myQuery" ;
           system:queryString "select * {?s ?p ?o}" ;
           system:queryCreator "admin" ;
           system:queryDatabase "myDb" .
    STORED_QUERY_TRIG:
      value: |-
        @prefix system: <http://system.stardog.com/> .

        {
            system:QuerymyQuery a system:StoredQuery ;
              system:queryName "myQuery" ;
              system:queryString "select * {?s ?p ?o}" ;
              system:queryCreator "admin" ;
              system:queryDatabase "myDb" .
        }
    STORED_QUERY_NTRIPLESQUADS:
      value: |-
        <http://system.stardog.com/QuerymyQuery> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://system.stardog.com/StoredQuery> .
        <http://system.stardog.com/QuerymyQuery> <http://system.stardog.com/queryName> "myQuery" .
        <http://system.stardog.com/QuerymyQuery> <http://system.stardog.com/queryString> "select * {?s ?p ?o}" .
        <http://system.stardog.com/QuerymyQuery> <http://system.stardog.com/queryCreator> "admin" .
        <http://system.stardog.com/QuerymyQuery> <http://system.stardog.com/queryDatabase> "myDb" .
    STORED_QUERY_RDFXML:
      value: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rdf:RDF\n\txmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n\txmlns:system=\"http://system.stardog.com/\">\n    <rdf:Description rdf:about=\"http://system.stardog.com/QuerymyQuery\">\n        <rdf:type rdf:resource=\"http://system.stardog.com/StoredQuery\"/>\n        <system:queryName rdf:datatype=\"http://www.w3.org/2001/XMLSchema#string\">myQuery</system:queryName>\n        <system:queryString rdf:datatype=\"http://www.w3.org/2001/XMLSchema#string\">select * {?s ?p ?o}</system:queryString>\n        <system:queryCreator rdf:datatype=\"http://www.w3.org/2001/XMLSchema#string\">admin</system:queryCreator>\n        <system:queryDatabase rdf:datatype=\"http://www.w3.org/2001/XMLSchema#string\">myDb</system:queryDatabase>\n    </rdf:Description>\n</rdf:RDF>"
    STORED_FUNCTION:
      value: |-
        FUNCTION permutation(?n,?r) {
           (factorial(?n) / factorial((?n - ?r)))
        }
    PLAINTEXT_INT:
      value: '42'
    ICV_CONSTRAINT_TTL:
      value: '<urn:Employee> <http://www.w3.org/2000/01/rdf-schema#subClassOf> <urn:Person> .'
    ICV_CONSTRAINT_RDFXML:
      value: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rdf:RDF\n\txmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n    <rdf:Description rdf:about=\"urn:Employee\">\n        <subClassOf xmlns=\"http://www.w3.org/2000/01/rdf-schema#\" rdf:resource=\"urn:Person\"/>\n    </rdf:Description>\n</rdf:RDF>"
    ICV_CONSTRAINT_JSONLD:
      value: |-
        [
          {
            "@id": "urn:Employee",
            "http://www.w3.org/2000/01/rdf-schema#subClassOf": [
              {
                "@id": "urn:Person"
              }
            ]
          }
        ]
    REASONING_AXIOM_TTL:
      value: '<urn:Employee> <http://www.w3.org/2000/01/rdf-schema#subClassOf> <urn:Person> .'
    REASONING_AXIOM_RDFXML:
      value: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rdf:RDF\n\txmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n    <rdf:Description rdf:about=\"urn:Employee1\">\n        <rdf:type rdf:resource=\"urn:Person\"/>\n    </rdf:Description>\n</rdf:RDF>"
    REASONING_AXIOM_JSONLD:
      value: |-
        [
            {
                "@id": "urn:Employee1",
                "@type": [
                    "urn:Person"
                ]
            }
        ]
    ICV_SPARQL_QUERY:
      value: |-
        SELECT DISTINCT *
        FROM <tag:stardog:api:context:local>
        WHERE {
           ?x0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <urn:Employee> .
           FILTER NOT EXISTS {
              ?x0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <urn:Person> .
           }
        }
    GRAPHQL_SCHEMA:
      value: |
        type Author {
          id: Int!
          firstName: String
          lastName: String
          posts: [Post]
        }type Post {
          id: Int!
          title: String
          author: Author
          votes: Int
        }type Query {
          posts: [Post]
          author(id: Int!): Author
        }
    ICV_VIOLATIONS:
      value: "--myBoundary\nContent-Type: application/rdf+xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rdf:RDF\n\txmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n\n<rdf:Description rdf:about=\"urn:Employee\">\n\t<rdf:type rdf:resource=\"http://www.w3.org/2002/07/owl#Class\"/>\n</rdf:Description>\n\n<rdf:Description rdf:about=\"urn:Person\">\n\t<rdf:type rdf:resource=\"http://www.w3.org/2002/07/owl#Class\"/>\n</rdf:Description>\n\n<rdf:Description rdf:about=\"urn:Employee\">\n\t<subClassOf xmlns=\"http://www.w3.org/2000/01/rdf-schema#\" rdf:resource=\"urn:Person\"/>\n</rdf:Description>\n\n</rdf:RDF>\n\n--myBoundary\nContent-Type: application/sparql-results+xml\n\n<?xml version='1.0' encoding='UTF-8'?><sparql xmlns='http://www.w3.org/2005/sparql-results#'><head><variable name='x0'/></head><results><result><binding name='x0'><uri>urn:Employee1</uri></binding></result></results></sparql>"
  requestBodies:
    ROLENAME:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ROLENAME'
    ENABLED:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ENABLED'
    USER_CREATE:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/USER_CREATE'
    USER_PASSWD:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/USER_PASSWD'
    DB_OFFLINE_ONLINE:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DB_OFFLINE_ONLINE'
    ROLE_LIST:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ROLE_LIST'
    PERMISSION:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PERMISSION'
    STORED_FUNCTION:
      content:
        text/plain:
          example:
            $ref: '#/components/examples/STORED_FUNCTION'
    CACHE_TARGET:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CACHE_TARGET'
    CACHE_LIST:
      content:
        application/json:
          schema:
            type: array
            items:
              type: URI
    VIRTUAL_GRAPH_CREATE:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VIRTUAL_GRAPH_CREATE'
    VIRTUAL_GRAPH_IMPORT:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VIRTUAL_GRAPH_IMPORT'
    GRAPHQL_SCHEMA:
      content:
        application/graphql:
          example:
            $ref: '#/components/examples/GRAPHQL_SCHEMA'
x-tagGroups:
  - name: Data Unification
    tags:
      - BITES
      - Virtual Graphs
  - name: Server
    tags:
      - Server Admin
      - Server Status/Metrics
      - Queries
      - Stored Functions
      - Cluster Admin
  - name: Database
    tags:
      - DB Admin
      - Transactions
      - Graph Store Protocol
      - SPARQL
      - GraphQL
      - Integrity Constraints
      - Data Caching
      - Reasoning
  - name: Security
    tags:
      - Users
      - Roles
      - Permissions
